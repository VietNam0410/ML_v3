import streamlit as st
import sys
import importlib
import traceback
import os
import logging
import mlflow
from typing import Optional

# ƒê·∫∑t m·ª©c log c·ªßa MLflow v·ªÅ WARNING ƒë·ªÉ gi·∫£m c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt
logging.getLogger("mlflow").setLevel(logging.WARNING)

# H√†m ch·∫°y m·ªôt file Streamlit ·ªïn ƒë·ªãnh
def run_stable_script(script_path: str) -> None:
    st.title("üåü Ch·∫°y ·ª®ng d·ª•ng Streamlit ·ªîn ƒê·ªãnh")

    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(script_path):
        st.error(f"File '{script_path}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
        return

    # Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
    st.subheader(f"ƒêang ch·∫°y file: {script_path}")
    st.write("N·∫øu c√≥ l·ªói, ·ª©ng d·ª•ng s·∫Ω kh√¥ng s·∫≠p m√† hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt.")

    try:
        # Import v√† ch·∫°y file Streamlit
        module_name = os.path.splitext(os.path.basename(script_path))[0]
        spec = importlib.util.spec_from_file_location(module_name, script_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules[module_name] = module
        spec.loader.exec_module(module)

        # G·ªçi h√†m ch√≠nh (n·∫øu c√≥) ho·∫∑c ch·∫°y tr·ª±c ti·∫øp
        if hasattr(module, "__main__"):
            module.__main__()
        elif hasattr(module, "main"):
            module.main()
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y h√†m ch√≠nh trong file. Vui l√≤ng ƒë·∫£m b·∫£o file c√≥ h√†m `if __name__ == '__main__':`.")

    except mlflow.exceptions.MlflowException as e:
        if "Model does not have the \"python_function\" flavor" in str(e):
            st.error("L·ªói: M√¥ h√¨nh kh√¥ng c√≥ flavor 'python_function'. Vui l√≤ng ki·ªÉm tra c√°ch log m√¥ h√¨nh trong file b√†i t·∫≠p.")
            st.write("**Gi·∫£i ph√°p:**")
            st.write("- ƒê·∫£m b·∫£o m√¥ h√¨nh (nh∆∞ PCA, KMeans, DBSCAN) ƒë∆∞·ª£c log v·ªõi signature r√µ r√†ng trong MLflow.")
            st.write("- S·ª≠ d·ª•ng `mlflow.sklearn.log_model` v·ªõi `signature` t√πy ch·ªânh ƒë·ªÉ h·ªó tr·ª£ flavor 'python_function', n·∫øu c·∫ßn.")
            st.write("**Traceback:**")
            st.code(traceback.format_exc(), language="python")
        else:
            st.error("·ª®ng d·ª•ng g·∫∑p l·ªói MLflow, nh∆∞ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªÉ kh√¥ng s·∫≠p:")
            st.write(f"**L·ªói chi ti·∫øt:** {str(e)}")
            st.write("**Traceback:**")
            st.code(traceback.format_exc(), language="python")
    except Exception as e:
        st.error("·ª®ng d·ª•ng g·∫∑p l·ªói, nh∆∞ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªÉ kh√¥ng s·∫≠p:")
        st.write(f"**L·ªói chi ti·∫øt:** {str(e)}")
        st.write("**Traceback:**")
        st.code(traceback.format_exc(), language="python")
        st.write("Vui l√≤ng ki·ªÉm tra file b√†i t·∫≠p ho·∫∑c b√°o c√°o l·ªói ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.")

    st.write("---")
    st.markdown("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng ·ªïn ƒë·ªãnh! üåü N·∫øu c√≥ th·∫Øc m·∫Øc, h√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i.")

# H√†m ch√≠nh
if __name__ == "__main__":
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file b√†i t·∫≠p b·∫°n mu·ªën ch·∫°y (v√≠ d·ª•: train_clustering.py)
    script_path = st.text_input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file Streamlit (v√≠ d·ª•: exercises/exercise_4/train_clustering.py)", 
                               value="exercises/exercise_4/train_clustering.py")

    if st.button("Ch·∫°y ·ª©ng d·ª•ng", key="run_button"):
        run_stable_script(script_path)
    
    # N√∫t l√†m m·ªõi ƒë·ªÉ th·ª≠ l·∫°i n·∫øu c√≥ l·ªói
    if st.button("L√†m m·ªõi ·ª©ng d·ª•ng", key="refresh_button"):
        st.experimental_rerun()
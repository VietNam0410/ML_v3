import streamlit as st
import sys
import importlib
import traceback
import os
import logging
from typing import Optional

# ƒê·∫∑t m·ª©c log c·ªßa MLflow v·ªÅ WARNING ƒë·ªÉ gi·∫£m c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt (n·∫øu c·∫ßn MLflow)
logging.getLogger("mlflow").setLevel(logging.WARNING)

# H√†m ch·∫°y m·ªôt file Streamlit ·ªïn ƒë·ªãnh
def run_stable_script(script_path: str) -> None:
    st.title("üåü Ch·∫°y ·ª®ng d·ª•ng Streamlit ·ªîn ƒê·ªãnh")

    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(script_path):
        st.error(f"File '{script_path}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
        return

    # Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
    st.subheader(f"ƒêang ch·∫°y file: {script_path}")
    st.write("N·∫øu c√≥ l·ªói, ·ª©ng d·ª•ng s·∫Ω kh√¥ng s·∫≠p m√† hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt.")

    try:
        # Import v√† ch·∫°y file Streamlit
        module_name = os.path.splitext(os.path.basename(script_path))[0]
        spec = importlib.util.spec_from_file_location(module_name, script_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules[module_name] = module
        spec.loader.exec_module(module)

        # G·ªçi h√†m ch√≠nh (n·∫øu c√≥) ho·∫∑c ch·∫°y tr·ª±c ti·∫øp
        if hasattr(module, "__main__"):
            module.__main__()
        elif hasattr(module, "main"):
            module.main()
        elif hasattr(module, "introduce_mnist"):  # Ki·ªÉm tra h√†m c·ª• th·ªÉ trong introduce_mnist.py
            module.introduce_mnist()
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y h√†m ch√≠nh trong file. Vui l√≤ng ƒë·∫£m b·∫£o file c√≥ h√†m `if __name__ == '__main__':` ho·∫∑c h√†m `introduce_mnist`.")

    except Exception as e:
        st.error("·ª®ng d·ª•ng g·∫∑p l·ªói, nh∆∞ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªÉ kh√¥ng s·∫≠p:")
        st.write(f"**L·ªói chi ti·∫øt:** {str(e)}")
        if "File './exercises/exercise_3/data/X.pkl' kh√¥ng t·ªìn t·∫°i" in str(e) or "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu MNIST" in str(e):
            st.write("**Gi·∫£i ph√°p:**")
            st.write("- ƒê·∫£m b·∫£o file `X.pkl` v√† `y.pkl` t·ªìn t·∫°i trong th∆∞ m·ª•c `exercises/exercise_3/data/`.");
            st.write("- Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c v√† t·∫°o d·ªØ li·ªáu n·∫øu c·∫ßn (xem h∆∞·ªõng d·∫´n b√™n d∆∞·ªõi).")
            st.write("**H∆∞·ªõng d·∫´n t·∫°o file .pkl:**")
            st.write("""
                1. T·∫°o m·ªôt script Python (v√≠ d·ª•: `generate_mnist_pkl.py`) trong th∆∞ m·ª•c g·ªëc v·ªõi n·ªôi dung sau:
                ```python
                import numpy as np
                from tensorflow.keras.datasets import mnist
                import pickle
                import os

                def generate_mnist_pkl(output_dir: str = "./exercises/exercise_3/data/"):
                    if not os.path.exists(output_dir):
                        os.makedirs(output_dir)
                    (X_train, y_train), (X_test, y_test) = mnist.load_data()
                    X = np.concatenate([X_train, X_test], axis=0) / 255.0  # Chu·∫©n h√≥a v·ªÅ [0, 1]
                    y = np.concatenate([y_train, y_test], axis=0).astype(np.int32)
                    x_path = os.path.join(output_dir, "X.pkl")
                    y_path = os.path.join(output_dir, "y.pkl")
                    with open(x_path, 'wb') as f:
                        pickle.dump(X, f)
                    with open(y_path, 'wb') as f:
                        pickle.dump(y, f)
                    print(f"D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {x_path} v√† {y_path}")

                if __name__ == "__main__":
                    generate_mnist_pkl()
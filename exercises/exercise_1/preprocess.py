import streamlit as st
import pandas as pd
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from common.utils import load_data, save_data
from common.mlflow_helper import log_preprocessing_params
import mlflow
import os 
mlflow.set_tracking_uri(f"file://{os.path.abspath('mlruns')}")

def preprocess_data():
    st.header("Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu Titanic üõ≥Ô∏è")

    # Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u d·ªØ li·ªáu
    if 'data' not in st.session_state:
        st.session_state['data'] = None
    if 'preprocessing_steps' not in st.session_state:
        st.session_state['preprocessing_steps'] = {}

    # B·∫Øt bu·ªôc ng∆∞·ªùi d√πng upload file tr∆∞·ªõc
    uploaded_file = st.file_uploader("T·∫£i l√™n file CSV Titanic üìÇ", type=["csv"])
    if uploaded_file and st.session_state['data'] is None:
        st.session_state['data'] = pd.read_csv(uploaded_file)
        st.session_state['preprocessing_steps'] = {}  # Reset steps khi upload file m·ªõi
        st.success("File ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng! ‚úÖ")

    if st.session_state['data'] is None:
        st.warning("Vui l√≤ng t·∫£i l√™n file CSV ƒë·ªÉ ti·∫øp t·ª•c. ‚ö†Ô∏è")
        return

    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc ho·∫∑c d·ªØ li·ªáu ƒëang x·ª≠ l√Ω
    st.subheader("Xem tr∆∞·ªõc d·ªØ li·ªáu hi·ªán t·∫°i üîç")
    st.write("ƒê√¢y l√† d·ªØ li·ªáu khi b·∫°n ti·∫øn h√†nh x·ª≠ l√Ω t·ª´ng b∆∞·ªõc:")
    st.write(st.session_state['data'].head())

    # Hi·ªÉn th·ªã th√¥ng tin c√≤n thi·∫øu
    st.subheader("D·ªØ li·ªáu thi·∫øu (Tr·∫°ng th√°i hi·ªán t·∫°i) ‚ö†Ô∏è")
    missing_info = st.session_state['data'].isnull().sum()
    st.write(missing_info)

    # 1. Lo·∫°i b·ªè c·ªôt
    st.write("### B∆∞·ªõc 1: Lo·∫°i b·ªè c·ªôt üóëÔ∏è")
    columns_to_drop = st.multiselect(
        "Ch·ªçn c·ªôt c·∫ßn lo·∫°i b·ªè",
        options=st.session_state['data'].columns.tolist(),
        help="G·ª£i √Ω: Lo·∫°i b·ªè 'Cabin' (nhi·ªÅu d·ªØ li·ªáu thi·∫øu), 'Name', 'Ticket', 'PassengerId' (kh√¥ng h·ªØu √≠ch)."
    )
    if st.button("Lo·∫°i b·ªè c√°c c·ªôt ƒë√£ ch·ªçn üóëÔ∏è"):
        if columns_to_drop:
            st.session_state['data'] = st.session_state['data'].drop(columns=columns_to_drop)
            st.session_state['preprocessing_steps']["dropped_columns"] = columns_to_drop
            st.success(f"ƒê√£ lo·∫°i b·ªè c√°c c·ªôt: {', '.join(columns_to_drop)}")
            st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t (Sau khi lo·∫°i b·ªè):", st.session_state['data'].head())

    # 2. ƒêi·ªÅn gi√° tr·ªã thi·∫øu
    st.write("### B∆∞·ªõc 2: ƒêi·ªÅn gi√° tr·ªã thi·∫øu ‚úèÔ∏è")
    missing_columns = [col for col in st.session_state['data'].columns if st.session_state['data'][col].isnull().sum() > 0]
    if missing_columns:
        for col in missing_columns:
            st.write(f"#### X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu ·ªü c·ªôt '{col}'")
            st.write(f"D·ªØ li·ªáu thi·∫øu: {st.session_state['data'][col].isnull().sum()} tr√™n t·ªïng s·ªë {len(st.session_state['data'])} d√≤ng")

            if st.session_state['data'][col].dtype in ['int64', 'float64']:
                st.info(f"G·ª£i √Ω: D√πng 'median' ho·∫∑c 'mean' cho d·ªØ li·ªáu s·ªë. Median b·ªÅn v·ªØng v·ªõi ngo·∫°i l·ªá.")
                fill_method = st.selectbox(
                    f"Ch·ªçn ph∆∞∆°ng ph√°p ƒëi·ªÅn cho '{col}'",
                    ["Mean", "Median", "Gi√° tr·ªã t√πy ch·ªânh"],
                    key=f"fill_method_{col}"
                )
                if fill_method == "Gi√° tr·ªã t√πy ch·ªânh":
                    custom_value = st.number_input(f"Nh·∫≠p gi√° tr·ªã t√πy ch·ªânh cho '{col}'", key=f"custom_{col}")
            else:
                st.info(f"G·ª£i √Ω: D√πng 'mode' cho d·ªØ li·ªáu ph√¢n lo·∫°i.")
                fill_method = st.selectbox(
                    f"Ch·ªçn ph∆∞∆°ng ph√°p ƒëi·ªÅn cho '{col}'",
                    ["Mode", "Gi√° tr·ªã t√πy ch·ªânh"],
                    key=f"fill_method_{col}"
                )
                if fill_method == "Gi√° tr·ªã t√πy ch·ªânh":
                    custom_value = st.text_input(f"Nh·∫≠p gi√° tr·ªã t√πy ch·ªânh cho '{col}'", key=f"custom_{col}")

            if st.button(f"ƒêi·ªÅn gi√° tr·ªã cho '{col}' ‚úèÔ∏è", key=f"fill_{col}"):
                if fill_method == "Mean":
                    st.session_state['data'][col] = st.session_state['data'][col].fillna(st.session_state['data'][col].mean())
                    st.session_state['preprocessing_steps'][f"{col}_filled"] = "mean"
                elif fill_method == "Median":
                    st.session_state['data'][col] = st.session_state['data'][col].fillna(st.session_state['data'][col].median())
                    st.session_state['preprocessing_steps'][f"{col}_filled"] = "median"
                elif fill_method == "Mode":
                    st.session_state['data'][col] = st.session_state['data'][col].fillna(st.session_state['data'][col].mode()[0])
                    st.session_state['preprocessing_steps'][f"{col}_filled"] = "mode"
                elif fill_method == "Gi√° tr·ªã t√πy ch·ªânh":
                    st.session_state['data'][col] = st.session_state['data'][col].fillna(custom_value)
                    st.session_state['preprocessing_steps'][f"{col}_filled"] = f"custom_{custom_value}"

                st.success(f"ƒê√£ ƒëi·ªÅn d·ªØ li·ªáu thi·∫øu ·ªü '{col}' b·∫±ng ph∆∞∆°ng ph√°p {fill_method.lower()}.")
                st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t (Sau khi ƒëi·ªÅn):", st.session_state['data'].head())
    else:
        st.success("Kh√¥ng ph√°t hi·ªán d·ªØ li·ªáu thi·∫øu trong t·∫≠p d·ªØ li·ªáu hi·ªán t·∫°i. ‚úÖ")

    # 3. Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ph√¢n lo·∫°i
    st.write("### B∆∞·ªõc 3: Chuy·ªÉn ƒë·ªïi c·ªôt ph√¢n lo·∫°i üî†")
    categorical_cols = [col for col in st.session_state['data'].columns if st.session_state['data'][col].dtype == 'object']
    if categorical_cols:
        for col in categorical_cols:
            st.write(f"#### Chuy·ªÉn ƒë·ªïi '{col}'")
            st.info(f"G·ª£i √Ω: 'Label Encoding' cho d·ªØ li·ªáu c√≥ th·ª© t·ª±/c√≥ √≠t gi√° tr·ªã; 'One-Hot Encoding' cho d·ªØ li·ªáu kh√¥ng th·ª© t·ª±/c√≥ √≠t gi√° tr·ªã.")
            encoding_method = st.selectbox(
                f"Ch·ªçn ph∆∞∆°ng ph√°p m√£ h√≥a cho '{col}'",
                ["Label Encoding", "One-Hot Encoding"],
                key=f"encode_{col}"
            )
            if st.button(f"√Åp d·ª•ng m√£ h√≥a cho '{col}' üî†", key=f"apply_{col}"):
                if encoding_method == "Label Encoding":
                    le = LabelEncoder()
                    st.session_state['data'][col] = le.fit_transform(st.session_state['data'][col])
                    st.session_state['preprocessing_steps'][f"{col}_encoded"] = "label"
                    st.success(f"ƒê√£ √°p d·ª•ng Label Encoding cho '{col}'.")
                elif encoding_method == "One-Hot Encoding":
                    st.session_state['data'] = pd.get_dummies(st.session_state['data'], columns=[col], prefix=col)
                    st.session_state['preprocessing_steps'][f"{col}_encoded"] = "one-hot"
                    st.success(f"ƒê√£ √°p d·ª•ng One-Hot Encoding cho '{col}'.")
                st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t (Sau khi m√£ h√≥a):", st.session_state['data'].head())
    else:
        st.success("Kh√¥ng c√≥ c·ªôt ph√¢n lo·∫°i n√†o ƒë·ªÉ m√£ h√≥a.")

    # 4. Chu·∫©n h√≥a d·ªØ li·ªáu
    st.write("### B∆∞·ªõc 4: Chu·∫©n h√≥a/D·ªØ li·ªáu quy m√¥ üî¢")
    numerical_cols = [col for col in st.session_state['data'].columns if st.session_state['data'][col].dtype in ['int64', 'float64']]
    if numerical_cols:
        st.info("G·ª£i √Ω: 'Min-Max Scaling' (0-1) cho ph·∫°m vi gi·ªõi h·∫°n; 'Standard Scaling' (mean=0, std=1) cho d·ªØ li·ªáu chu·∫©n.")
        scaling_method = st.selectbox(
            "Ch·ªçn ph∆∞∆°ng ph√°p chu·∫©n h√≥a",
            ["Min-Max Scaling", "Standard Scaling"]
        )
        cols_to_scale = st.multiselect(
            "Ch·ªçn c√°c c·ªôt s·ªë c·∫ßn chu·∫©n h√≥a",
            options=numerical_cols,
            default=numerical_cols
        )
        if st.button("√Åp d·ª•ng chu·∫©n h√≥a üìè"):
            if cols_to_scale:
                if scaling_method == "Min-Max Scaling":
                    scaler = MinMaxScaler()
                    st.session_state['data'][cols_to_scale] = scaler.fit_transform(st.session_state['data'][cols_to_scale])
                    st.session_state['preprocessing_steps']["scaling"] = "min-max"
                elif scaling_method == "Standard Scaling":
                    scaler = StandardScaler()
                    st.session_state['data'][cols_to_scale] = scaler.fit_transform(st.session_state['data'][cols_to_scale])
                    st.session_state['preprocessing_steps']["scaling"] = "standard"
                st.session_state['preprocessing_steps']["scaled_columns"] = cols_to_scale
                st.success(f"ƒê√£ √°p d·ª•ng {scaling_method} cho c√°c c·ªôt: {', '.join(cols_to_scale)}")
                st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t (Sau khi chu·∫©n h√≥a):", st.session_state['data'].head())
            else:
                st.warning("Kh√¥ng c√≥ c·ªôt n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ chu·∫©n h√≥a.")
    else:
        st.success("Kh√¥ng c√≥ c·ªôt s·ªë n√†o ƒë·ªÉ chu·∫©n h√≥a.")

    # 5. L∆∞u v√† log d·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω
    st.write("### B∆∞·ªõc 5: L∆∞u d·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω üíæ")
    if st.button("L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√† log v√†o MLflow üìã"):
        processed_file = "exercises/exercise_1/data/processed/titanic_processed.csv"
        save_data(st.session_state['data'], processed_file)
        st.success(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {processed_file} üíæ")

        # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng tr∆∞·ªõc khi l∆∞u
        st.subheader("Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω cu·ªëi c√πng (Tr∆∞·ªõc khi l∆∞u) üîö")
        st.write(st.session_state['data'].head())

        # Log c√°c tham s·ªë ti·ªÅn x·ª≠ l√Ω v√†o MLflow
        log_preprocessing_params(st.session_state['preprocessing_steps'])
        st.success("C√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω ƒë√£ ƒë∆∞·ª£c log v√†o MLflow! üìä")

        # X√°c nh·∫≠n d·ªØ li·ªáu ƒë√£ l∆∞u ƒë√∫ng
        saved_data = load_data(processed_file)
        st.write("X√°c nh·∫≠n: D·ªØ li·ªáu t·∫£i l·∫°i t·ª´ file ƒë√£ l∆∞u tr√πng kh·ªõp v·ªõi c√°c l·ª±a ch·ªçn ti·ªÅn x·ª≠ l√Ω c·ªßa b·∫°n:")
        st.write(saved_data.head())

if __name__ == "__main__":
    preprocess_data()

import streamlit as st
import numpy as np
from sklearn.cluster import KMeans, DBSCAN
from sklearn.model_selection import train_test_split
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
import mlflow
import os

# Thi·∫øt l·∫≠p MLflow Tracking URI c·ª•c b·ªô
if not os.path.exists('mlruns'):
    os.makedirs('mlruns')
mlflow.set_tracking_uri(f"file://{os.path.abspath('mlruns')}")

def train_mnist_clustering():
    st.header("Hu·∫•n luy·ªán M√¥ h√¨nh Ph√¢n C·ª•m MNIST üßÆ")

    # Cho ng∆∞·ªùi d√πng ƒë·∫∑t t√™n Experiment
    experiment_name = st.text_input("Nh·∫≠p T√™n Experiment cho hu·∫•n luy·ªán ph√¢n c·ª•m", value="MNIST_Clustering")
    if experiment_name:
        mlflow.set_experiment(experiment_name)
    
    # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω trong session t·ª´ preprocessing.py
    if 'X_full' not in st.session_state or 'y_full' not in st.session_state:
        st.error("D·ªØ li·ªáu MNIST ch∆∞a ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω. Vui l√≤ng ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST' tr∆∞·ªõc.")
        return

    X_full = st.session_state['X_full']
    y_full = st.session_state['y_full']
    total_samples = len(X_full)

    st.subheader("D·ªØ li·ªáu MNIST ƒë√£ x·ª≠ l√Ω üìù")
    st.write(f"T·ªïng s·ªë l∆∞·ª£ng m·∫´u: {total_samples}")

    # Cho ng∆∞·ªùi d√πng ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ tr√°nh ch·∫≠m trang
    max_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u t·ªëi ƒëa (0 ƒë·ªÉ d√πng to√†n b·ªô)", 0, total_samples, total_samples, step=100)
    if max_samples == 0:
        max_samples = total_samples
    elif max_samples > total_samples:
        st.error(f"S·ªë l∆∞·ª£ng m·∫´u ({max_samples}) v∆∞·ª£t qu√° t·ªïng s·ªë m·∫´u c√≥ s·∫µn ({total_samples}). ƒê·∫∑t l·∫°i v·ªÅ {total_samples}.")
        max_samples = total_samples

    # L·∫•y m·∫´u ng·∫´u nhi√™n n·∫øu max_samples < total_samples
    if max_samples < total_samples:
        indices = np.random.choice(total_samples, max_samples, replace=False)
        X_subset = X_full[indices]
        y_subset = y_full[indices]
    else:
        X_subset = X_full
        y_subset = y_full

    # Chu·∫©n b·ªã d·ªØ li·ªáu: Flatten h√¨nh ·∫£nh 28x28 th√†nh vector 784 chi·ªÅu
    X_data = X_subset.reshape(-1, 28 * 28)

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X_data)

    # Chia d·ªØ li·ªáu train/test
    st.subheader("Chia t√°ch D·ªØ li·ªáu (T√πy ch·ªçn) üîÄ")
    test_size = st.slider("Ch·ªçn k√≠ch th∆∞·ªõc t·∫≠p ki·ªÉm tra (%)", min_value=10, max_value=40, value=20, step=5) / 100
    if st.button("Chia d·ªØ li·ªáu"):
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_subset, test_size=test_size, random_state=42)
        st.session_state['X_train'] = X_train
        st.session_state['X_test'] = X_test
        st.session_state['y_train'] = y_train
        st.session_state['y_test'] = y_test
        st.success(f"ƒê√£ chia d·ªØ li·ªáu v·ªõi k√≠ch th∆∞·ªõc: Hu·∫•n luy·ªán {100-test_size*100:.1f}%, Ki·ªÉm tra {test_size*100:.1f}%! ‚úÖ")
        st.write(f"T·∫≠p hu·∫•n luy·ªán: {len(X_train)} m·∫´u")
        st.write(f"T·∫≠p ki·ªÉm tra: {len(X_test)} m·∫´u")

    # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ chia ch∆∞a
    if 'X_train' not in st.session_state or 'X_test' not in st.session_state:
        st.warning("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc khi hu·∫•n luy·ªán m√¥ h√¨nh. ‚ö†Ô∏è")
        return

    X_train = st.session_state['X_train']
    X_test = st.session_state['X_test']

    # X√¢y d·ª±ng v√† hu·∫•n luy·ªán m√¥ h√¨nh ph√¢n c·ª•m
    st.subheader("X√¢y d·ª±ng v√† Hu·∫•n luy·ªán M√¥ h√¨nh Ph√¢n C·ª•m üéØ")
    model_choice = st.selectbox(
        "Ch·ªçn lo·∫°i m√¥ h√¨nh ph√¢n c·ª•m",
        ["K-means", "DBSCAN"]
    )

    # Tham s·ªë hu·∫•n luy·ªán cho t·ª´ng m√¥ h√¨nh
    if model_choice == "K-means":
        n_clusters = st.slider("S·ªë c·ª•m", 2, 20, 10, step=1)
        model_params = {"n_clusters": n_clusters}
    else:  # DBSCAN
        eps = st.slider("Epsilon (kho·∫£ng c√°ch t·ªëi ƒëa)", 0.1, 1.0, 0.5, step=0.1)
        min_samples = st.slider("S·ªë m·∫´u t·ªëi thi·ªÉu", 1, 10, 5, step=1)
        model_params = {"eps": eps, "min_samples": min_samples}

    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        # Ki·ªÉm tra v√† k·∫øt th√∫c run hi·ªán t·∫°i n·∫øu c√≥
        active_run = mlflow.active_run()
        if active_run:
            mlflow.end_run()

        with mlflow.start_run(run_name=f"{model_choice}_MNIST_{experiment_name}") as run:
            if model_choice == "K-means":
                model = KMeans(**model_params, random_state=42)
                clusters_train = model.fit_predict(X_train)
                clusters_test = model.predict(X_test)

                # ƒê√°nh gi√° b·∫±ng silhouette score (n·∫øu c√≥ ƒë·ªß c·ª•m)
                silhouette_train = silhouette_score(X_train, clusters_train) if len(np.unique(clusters_train)) > 1 else None
                silhouette_test = silhouette_score(X_test, clusters_test) if len(np.unique(clusters_test)) > 1 else None

                st.write(f"M√¥ h√¨nh ƒë√£ ch·ªçn: {model_choice}")
                st.write(f"Tham s·ªë: {model_params}")
                st.write(f"Silhouette Score (T·∫≠p hu·∫•n luy·ªán): {silhouette_train:.4f}" if silhouette_train else "Kh√¥ng th·ªÉ t√≠nh Silhouette Score do s·ªë c·ª•m kh√¥ng ƒë·ªß ƒëa d·∫°ng.")
                st.write(f"Silhouette Score (T·∫≠p ki·ªÉm tra): {silhouette_test:.4f}" if silhouette_test else "Kh√¥ng th·ªÉ t√≠nh Silhouette Score do s·ªë c·ª•m kh√¥ng ƒë·ªß ƒëa d·∫°ng.")

                # Log m√¥ h√¨nh v√† metrics v√†o MLflow
                mlflow.log_params(model_params)
                mlflow.log_param("model_type", model_choice)
                if silhouette_train:
                    mlflow.log_metric("silhouette_train", silhouette_train)
                if silhouette_test:
                    mlflow.log_metric("silhouette_test", silhouette_test)
                mlflow.sklearn.log_model(model, "model", input_example=X_train[:1])
                mlflow.sklearn.log_model(scaler, "scaler", input_example=X_train[:1])

            else:  # DBSCAN
                model = DBSCAN(**model_params)
                clusters_train = model.fit_predict(X_train)
                clusters_test = model.fit_predict(X_test)

                # ƒê√°nh gi√° b·∫±ng silhouette score (n·∫øu c√≥ ƒë·ªß c·ª•m, lo·∫°i b·ªè noise)
                mask_train = clusters_train != -1  # Lo·∫°i b·ªè noise (-1)
                mask_test = clusters_test != -1
                silhouette_train = silhouette_score(X_train[mask_train], clusters_train[mask_train]) if len(np.unique(clusters_train[mask_train])) > 1 else None
                silhouette_test = silhouette_score(X_test[mask_test], clusters_test[mask_test]) if len(np.unique(clusters_test[mask_test])) > 1 else None

                st.write(f"M√¥ h√¨nh ƒë√£ ch·ªçn: {model_choice}")
                st.write(f"Tham s·ªë: {model_params}")
                st.write(f"Silhouette Score (T·∫≠p hu·∫•n luy·ªán): {silhouette_train:.4f}" if silhouette_train else "Kh√¥ng th·ªÉ t√≠nh Silhouette Score do s·ªë c·ª•m kh√¥ng ƒë·ªß ƒëa d·∫°ng ho·∫∑c to√†n b·ªô l√† noise.")
                st.write(f"Silhouette Score (T·∫≠p ki·ªÉm tra): {silhouette_test:.4f}" if silhouette_test else "Kh√¥ng th·ªÉ t√≠nh Silhouette Score do s·ªë c·ª•m kh√¥ng ƒë·ªß ƒëa d·∫°ng ho·∫∑c to√†n b·ªô l√† noise.")
                st.write("L∆∞u √Ω: DBSCAN c√≥ th·ªÉ ph√¢n lo·∫°i m·ªôt s·ªë ƒëi·ªÉm l√† noise (-1).")

                # Log m√¥ h√¨nh v√† metrics v√†o MLflow
                mlflow.log_params(model_params)
                mlflow.log_param("model_type", model_choice)
                if silhouette_train:
                    mlflow.log_metric("silhouette_train", silhouette_train)
                if silhouette_test:
                    mlflow.log_metric("silhouette_test", silhouette_test)
                mlflow.sklearn.log_model(model, "model", input_example=X_train[:1])
                mlflow.sklearn.log_model(scaler, "scaler", input_example=X_train[:1])

            st.success(f"Hu·∫•n luy·ªán {model_choice} ho√†n t·∫•t v√† log v√†o MLflow th√†nh c√¥ng! ‚úÖ (Run ID: {run.info.run_id})")

            # L∆∞u m√¥ h√¨nh v√† scaler trong session ƒë·ªÉ d√πng cho demo
            st.session_state['mnist_model'] = model
            st.session_state['scaler'] = scaler
            st.session_state['clustering_metrics'] = {
                "silhouette_train": silhouette_train if silhouette_train else None,
                "silhouette_test": silhouette_test if silhouette_test else None
            }

if __name__ == "__main__":
    train_mnist_clustering()
import streamlit as st
import numpy as np
from PIL import Image
import mlflow
import os
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from streamlit_drawable_canvas import st_canvas

# Thi·∫øt l·∫≠p MLflow Tracking URI c·ª•c b·ªô
mlruns_dir = os.path.abspath('mlruns')
if not os.path.exists(mlruns_dir):
    os.makedirs(mlruns_dir)
mlflow.set_tracking_uri(f"file://{mlruns_dir}")

def show_mnist_clustering_demo():
    st.header("Demo Ph√¢n C·ª•m Ch·ªØ s·ªë MNIST üñåÔ∏è")
    experiment_name = "MNIST_Clustering"

    # Ki·ªÉm tra d·ªØ li·ªáu v√† m√¥ h√¨nh t·ª´ session ho·∫∑c MLflow
    if 'mnist_model' not in st.session_state or st.session_state['mnist_model'] is None:
        # N·∫øu kh√¥ng c√≥ trong session, ki·ªÉm tra trong MLflow
        runs = mlflow.search_runs(experiment_names=[experiment_name])
        if runs.empty:
            st.error("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh n√†o trong MLflow. Vui l√≤ng ch·∫°y 'train.py' tr∆∞·ªõc.")
            return

        run_options = {f"{run['tags.mlflow.runName']} (ID: {run['run_id'][:8]})": run['run_id'] for _, run in runs.iterrows()}
        selected_run_name = st.selectbox("Ch·ªçn m√¥ h√¨nh t·ª´ MLflow", list(run_options.keys()))
        selected_run_id = run_options[selected_run_name]

        try:
            model = mlflow.sklearn.load_model(f"runs:/{selected_run_id}/model")
            scaler = mlflow.sklearn.load_model(f"runs:/{selected_run_id}/scaler")
            model_type = runs[runs['run_id'] == selected_run_id]['params.model_type'].iloc[0]
            st.write(f"M√¥ h√¨nh ph√¢n c·ª•m ƒë∆∞·ª£c ch·ªçn: {model_type}")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh/scaler t·ª´ MLflow: {str(e)}. Run ID: {selected_run_id}")
            return
    else:
        # S·ª≠ d·ª•ng m√¥ h√¨nh v√† scaler t·ª´ session (t·ª´ train_mnist_clustering.py)
        model = st.session_state['mnist_model']
        scaler = st.session_state['scaler']
        model_type = "K-means" if isinstance(model, KMeans) else "DBSCAN"
        st.write(f"M√¥ h√¨nh ph√¢n c·ª•m ƒë∆∞·ª£c ch·ªçn: {model_type} (t·ª´ session)")

    # T√πy ch·ªçn v·∫Ω ho·∫∑c upload ·∫£nh
    st.subheader("V·∫Ω ho·∫∑c T·∫£i ·∫£nh ƒë·ªÉ ph√¢n c·ª•m üñãÔ∏è")
    input_type = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:", ["V·∫Ω ch·ªØ s·ªë", "T·∫£i ·∫£nh"])

    if input_type == "V·∫Ω ch·ªØ s·ªë":
        # V·∫Ω ch·ªØ s·ªë tr√™n canvas
        canvas_result = st_canvas(
            stroke_width=5,
            stroke_color="black",
            background_color="white",
            width=280,
            height=280,
            drawing_mode="freedraw",
            key="canvas"
        )

        if st.button("X√≥a canvas"):
            st.rerun()

        if canvas_result.image_data is not None:
            image = Image.fromarray(canvas_result.image_data).convert('L').resize((28, 28))
            image_array = np.array(image) / 255.0
            st.image(image_array, caption="H√¨nh ·∫£nh ƒë√£ v·∫Ω", width=100)

            if st.button("Ph√¢n c·ª•m"):
                input_data = image_array.reshape(1, 28 * 28)
                input_data_scaled = scaler.transform(input_data)
                cluster = model.fit_predict(input_data_scaled)[0]

                # Log v√†o MLflow
                if mlflow.active_run():
                    mlflow.end_run()
                with mlflow.start_run(run_name="Clustering_Prediction", experiment_id=mlflow.get_experiment_by_name(experiment_name).experiment_id):
                    mlflow.log_param("model_run_id", selected_run_id if 'selected_run_id' in locals() else "From_Session")
                    mlflow.log_param("cluster", cluster)
                    st.success(f"Ph√¢n c·ª•m: {cluster} (Run ID: {mlflow.active_run().info.run_id})")

    else:  # T·∫£i ·∫£nh
        uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh ch·ªØ s·ªë (PNG/JPG/JPEG)", type=["png", "jpg", "jpeg"])
        if uploaded_file is not None:
            image = Image.open(uploaded_file).convert('L').resize((28, 28))
            image_array = np.array(image) / 255.0
            st.image(image_array, caption="H√¨nh ·∫£nh ƒë√£ t·∫£i", width=100)

            if st.button("Ph√¢n c·ª•m t·ª´ ·∫£nh"):
                input_data = image_array.reshape(1, 28 * 28)
                input_data_scaled = scaler.transform(input_data)
                cluster = model.fit_predict(input_data_scaled)[0]

                # Log v√†o MLflow
                if mlflow.active_run():
                    mlflow.end_run()
                with mlflow.start_run(run_name="Clustering_Prediction", experiment_id=mlflow.get_experiment_by_name(experiment_name).experiment_id):
                    mlflow.log_param("model_run_id", selected_run_id if 'selected_run_id' in locals() else "From_Session")
                    mlflow.log_param("cluster", cluster)
                    st.success(f"Ph√¢n c·ª•m: {cluster} (Run ID: {mlflow.active_run().info.run_id})")

    # L·ªãch s·ª≠ ph√¢n c·ª•m
    st.subheader("L·ªãch s·ª≠ ph√¢n c·ª•m")
    pred_runs = mlflow.search_runs(experiment_names=[experiment_name], filter_string="tags.mlflow.runName = 'Clustering_Prediction'")
    if not pred_runs.empty:
        for _, run in pred_runs.iterrows():
            # L·∫•y th√¥ng tin run chi ti·∫øt t·ª´ mlflow.get_run
            run_id = run['run_id']
            run_details = mlflow.get_run(run_id)
            params = run_details.data.params if run_details.data.params else {}
            cluster = params.get("cluster", "N/A")
            try:
                image_path = mlflow.artifacts.download_artifacts(run_id=run_id, path="input_image.npy")
                image_data = np.load(image_path)
                st.image(image_data, caption=f"Ph√¢n c·ª•m: {cluster}", width=100)
            except Exception as e:
                st.write(f"Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh cho run {run_id[:8]}: {str(e)}")
    else:
        st.write("Ch∆∞a c√≥ ph√¢n c·ª•m n√†o ƒë∆∞·ª£c log.")

if __name__ == "__main__":
    show_mnist_clustering_demo()
import streamlit as st
import mlflow
import os
import pandas as pd

def view_log_6():
    st.title("üìä Xem Logs Hu·∫•n Luy·ªán MNIST v·ªõi Pseudo Labeling")
    st.markdown("Danh s√°ch c√°c l·∫ßn hu·∫•n luy·ªán (runs) ƒë∆∞·ª£c l∆∞u trong MLflow.")

    # Thi·∫øt l·∫≠p MLflow
    mlflow.set_tracking_uri("https://dagshub.com/VietNam0410/ML_v3.mlflow")
    os.environ["MLFLOW_TRACKING_USERNAME"] = "VietNam0410"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "c9db6bdcca1dfed76d2af2cdb15a9277e6732d6b"

    # L·∫•y danh s√°ch c√°c run t·ª´ MLflow (experiment m·ªõi)
    experiment = mlflow.get_experiment_by_name("MNIST_Pseudo_Labeling_Train")
    if experiment is None:
        st.error("Kh√¥ng t√¨m th·∫•y experiment 'MNIST_Pseudo_Labeling_Train' trong MLflow.")
        return
    runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id])

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ run n√†o
    if runs.empty:
        st.warning("Kh√¥ng c√≥ run n√†o ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
        return

    # ƒê·ªãnh nghƒ©a c√°c c·ªôt mong mu·ªën (ƒë·ªìng b·ªô v·ªõi train.py)
    expected_columns = [
        'params.n_hidden_layers', 'params.neurons_per_layer', 'params.epochs',
        'params.batch_size', 'params.learning_rate', 'params.activation',
        'params.num_samples', 'params.test_ratio', 'params.val_ratio', 'params.train_ratio',
        'params.labeled_ratio', 'params.max_iterations', 'params.threshold',
        'params.labeling_iterations', 'params.total_iterations', 'params.log_time',
        'metrics.final_val_accuracy', 'metrics.final_test_accuracy', 'metrics.final_train_accuracy',
        'metrics.total_correct_pseudo_labels'
    ]
    for col in expected_columns:
        if col not in runs.columns:
            runs[col] = None

    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ l·ªçc v√† hi·ªÉn th·ªã
    df_runs = runs[['run_id', 'params.log_time'] + expected_columns].copy()
    for col in df_runs.columns:
        if col.startswith('params.') or col.startswith('metrics.'):
            df_runs[col] = pd.to_numeric(df_runs[col], errors='coerce')

    # Th√™m b·ªô l·ªçc
    st.subheader("L·ªçc Danh S√°ch Run")
    col1, col2 = st.columns(2)
    with col1:
        min_val_acc = st.slider("ƒê·ªô ch√≠nh x√°c Validation t·ªëi thi·ªÉu", min_value=0.0, max_value=1.0, value=0.0, step=0.01)
    with col2:
        min_train_acc = st.slider("ƒê·ªô ch√≠nh x√°c Train t·ªëi thi·ªÉu", min_value=0.0, max_value=1.0, value=0.0, step=0.01)

    # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n b·ªô l·ªçc
    filtered_runs = df_runs[
        (df_runs['metrics.final_val_accuracy'].fillna(0) >= min_val_acc) &
        (df_runs['metrics.final_train_accuracy'].fillna(0) >= min_train_acc)
    ]

    # Hi·ªÉn th·ªã danh s√°ch c√°c run ƒë√£ l·ªçc
    st.subheader("Danh S√°ch C√°c Run ƒê√£ L∆∞u (ƒê√£ L·ªçc)")
    if filtered_runs.empty:
        st.warning("Kh√¥ng c√≥ run n√†o kh·ªõp v·ªõi b·ªô l·ªçc. Vui l√≤ng ƒëi·ªÅu ch·ªânh b·ªô l·ªçc.")
    else:
        st.dataframe(filtered_runs)

    # Ch·ªçn m·ªôt run ƒë·ªÉ xem chi ti·∫øt
    run_options = filtered_runs['run_id'].tolist()
    selected_run = st.selectbox("Ch·ªçn m·ªôt run ƒë·ªÉ xem chi ti·∫øt:", run_options, index=0 if not filtered_runs.empty else None)
    if selected_run and not filtered_runs.empty:
        run_info = mlflow.get_run(selected_run)

        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ run
        st.subheader(f"Th√¥ng Tin Run ƒê∆∞·ª£c Ch·ªçn: {selected_run}")
        st.write(f"**Run ID**: {selected_run}")

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ (Metrics)
        if run_info.data.metrics:
            st.markdown("### K·∫øt Qu·∫£ Hu·∫•n Luy·ªán")
            final_val_accuracy = run_info.data.metrics.get('final_val_accuracy', 'N/A')
            final_test_accuracy = run_info.data.metrics.get('final_test_accuracy', 'N/A')
            final_train_accuracy = run_info.data.metrics.get('final_train_accuracy', 'N/A')
            total_correct_pseudo_labels = run_info.data.metrics.get('total_correct_pseudo_labels', 'N/A')

            formatted_val_acc = f"{final_val_accuracy:.4f}" if isinstance(final_val_accuracy, (int, float)) else final_val_accuracy
            formatted_test_acc = f"{final_test_accuracy:.4f}" if isinstance(final_test_accuracy, (int, float)) else final_test_accuracy
            formatted_train_acc = f"{final_train_accuracy:.4f}" if isinstance(final_train_accuracy, (int, float)) else final_train_accuracy
            formatted_correct_labels = f"{total_correct_pseudo_labels:.0f}" if isinstance(total_correct_pseudo_labels, (int, float)) else total_correct_pseudo_labels

            st.write(f"**ƒê·ªô ch√≠nh x√°c (Validation)**: {formatted_val_acc}")
            st.write(f"**ƒê·ªô ch√≠nh x√°c (Test)**: {formatted_test_acc}")
            st.write(f"**ƒê·ªô ch√≠nh x√°c (Train)**: {formatted_train_acc}")
            st.write(f"**T·ªïng s·ªë nh√£n gi·∫£ ƒë√∫ng**: {formatted_correct_labels}")
        else:
            st.warning("Kh√¥ng c√≥ metrics n√†o ƒë∆∞·ª£c ghi l·∫°i cho run n√†y.")

        # Hi·ªÉn th·ªã tham s·ªë (Chia th√†nh 2 ph·∫ßn: Tham s·ªë ch√≠nh v√† Pseudo Labeling)
        if run_info.data.params:
            st.markdown("### Tham S·ªë Hu·∫•n Luy·ªán")
            st.write("#### Tham S·ªë M·∫°ng N∆°-ron")
            st.write(f"- S·ªë l·ªõp ·∫©n: {run_info.data.params.get('n_hidden_layers', 'N/A')}")
            st.write(f"- S·ªë n∆°-ron m·ªói l·ªõp: {run_info.data.params.get('neurons_per_layer', 'N/A')}")
            st.write(f"- S·ªë v√≤ng l·∫∑p (epochs): {run_info.data.params.get('epochs', 'N/A')}")
            st.write(f"- K√≠ch th∆∞·ªõc batch: {run_info.data.params.get('batch_size', 'N/A')}")
            st.write(f"- T·ªëc ƒë·ªô h·ªçc (Œ∑): {run_info.data.params.get('learning_rate', 'N/A')}")
            st.write(f"- H√†m k√≠ch ho·∫°t: {run_info.data.params.get('activation', 'N/A')}")

            st.write("#### Tham S·ªë D·ªØ Li·ªáu")
            st.write(f"- S·ªë m·∫´u hu·∫•n luy·ªán: {run_info.data.params.get('num_samples', 'N/A')}")
            st.write(f"- T·ª∑ l·ªá Test: {run_info.data.params.get('test_ratio', 'N/A')}%")
            st.write(f"- T·ª∑ l·ªá Validation: {run_info.data.params.get('val_ratio', 'N/A')}%")
            st.write(f"- T·ª∑ l·ªá Train: {run_info.data.params.get('train_ratio', 'N/A')}%")
            st.write(f"- T·ª∑ l·ªá g√°n nh√£n ban ƒë·∫ßu: {run_info.data.params.get('labeled_ratio', 'N/A')}")

            st.write("#### Tham S·ªë Pseudo Labeling")
            st.write(f"- S·ªë v√≤ng l·∫∑p t·ªëi ƒëa: {run_info.data.params.get('max_iterations', 'N/A')}")
            st.write(f"- Ng∆∞·ª°ng ƒë·ªô tin c·∫≠y: {run_info.data.params.get('threshold', 'N/A')}")
            st.write(f"- S·ªë v√≤ng l·∫∑p g√°n nh√£n: {run_info.data.params.get('labeling_iterations', 'N/A')}")
            st.write(f"- T·ªïng s·ªë v√≤ng l·∫∑p: {run_info.data.params.get('total_iterations', 'N/A')}")

            st.write("#### Th√¥ng Tin Kh√°c")
            st.write(f"- Th·ªùi gian hu·∫•n luy·ªán: {run_info.data.params.get('log_time', 'N/A')}")
        else:
            st.warning("Kh√¥ng c√≥ tham s·ªë n√†o ƒë∆∞·ª£c ghi l·∫°i cho run n√†y.")

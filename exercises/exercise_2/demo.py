import streamlit as st
import numpy as np
from PIL import Image
import pandas as pd
import mlflow
import os
from streamlit_drawable_canvas import st_canvas
from sklearn.preprocessing import StandardScaler

# Thi·∫øt l·∫≠p MLflow Tracking URI c·ª•c b·ªô
if not os.path.exists('mlruns'):
    os.makedirs('mlruns')
mlflow.set_tracking_uri(f"file://{os.path.abspath('mlruns')}")

def show_mnist_demo():
    st.header("Demo Nh·∫≠n di·ªán Ch·ªØ s·ªë Vi·∫øt Tay MNIST üñåÔ∏è")

    # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán trong MLflow
    experiment_name = "MNIST_Training"  # Gi·∫£ ƒë·ªãnh t√™n experiment t·ª´ train.py
    client = mlflow.tracking.MlflowClient()
    runs = mlflow.search_runs(experiment_names=[experiment_name])

    if runs.empty:
        st.error("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán trong MLflow. Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh trong 'Hu·∫•n luy·ªán M√¥ h√¨nh Nh·∫≠n di·ªán Ch·ªØ s·ªë MNIST' tr∆∞·ªõc.")
        return

    # Cho ng∆∞·ªùi d√πng ch·ªçn run (m√¥ h√¨nh) ƒë·ªÉ d·ª± ƒëo√°n
    # S·ª≠a ƒë·ªïi b·ªüi Grok 3: Lo·∫°i b·ªè session_state, ch·ªâ d√πng MLflow
    run_options = {f"Run {run['run_id']} - {run.get('tags.mlflow.runName', 'No Name')}": run['run_id'] for _, run in runs.iterrows()}
    selected_run_name = st.selectbox("Ch·ªçn run (m√¥ h√¨nh) ƒë·ªÉ d·ª± ƒëo√°n", options=list(run_options.keys()))
    selected_run_id = run_options[selected_run_name]

    try:
        model = mlflow.sklearn.load_model(f"runs:/{selected_run_id}/model")
        # Load scaler t·ª´ MLflow (n·∫øu c√≥)
        try:
            scaler = mlflow.sklearn.load_model(f"runs:/{selected_run_id}/scaler")
        except Exception:
            scaler = StandardScaler()  # Fallback n·∫øu kh√¥ng c√≥ scaler trong MLflow
        # Load model_choice t·ª´ params trong MLflow
        run = client.get_run(selected_run_id)
        model_choice = run.data.params.get("model_type", "SVM (Support Vector Machine)")  # M·∫∑c ƒë·ªãnh l√† SVM n·∫øu kh√¥ng t√¨m th·∫•y
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ho·∫∑c th√¥ng tin t·ª´ MLflow. L·ªói: {str(e)}. Vui l√≤ng ki·ªÉm tra MLflow ho·∫∑c hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh.")
        return

    # Hi·ªÉn th·ªã m√¥ h√¨nh ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ d·ª± ƒëo√°n
    # S·ª≠a ƒë·ªïi b·ªüi Grok 3: Hi·ªÉn th·ªã v√† log model_choice
    st.write(f"M√¥ h√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ d·ª± ƒëo√°n: {model_choice}")

    # T·∫°o giao di·ªán cho ng∆∞·ªùi d√πng v·∫Ω ch·ªØ s·ªë b·∫±ng streamlit-drawable-canvas
    st.subheader("V·∫Ω m·ªôt ch·ªØ s·ªë ƒë·ªÉ nh·∫≠n di·ªán üñãÔ∏è")
    drawing_mode = st.checkbox("B·∫≠t ch·∫ø ƒë·ªô v·∫Ω", value=True)
    if drawing_mode:
        canvas_result = st_canvas(
            fill_color="rgba(255, 255, 255, 0.0)",  # M√†u n·ªÅn trong su·ªët
            stroke_width=5,
            stroke_color="black",
            background_color="white",
            width=280,
            height=280,
            drawing_mode="freedraw" if drawing_mode else None,
            key="canvas"
        )

        if canvas_result.image_data is not None:
            # Chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh t·ª´ canvas th√†nh m·∫£ng numpy b·∫±ng PIL
            image = Image.fromarray(canvas_result.image_data).convert('L')  # Chuy·ªÉn th√†nh grayscale
            image = image.resize((28, 28))  # Thay ƒë·ªïi k√≠ch th∆∞·ªõc v·ªÅ 28x28
            image = np.array(image) / 255.0  # Chu·∫©n h√≥a [0, 1]

            # Hi·ªÉn th·ªã h√¨nh ·∫£nh ƒë√£ v·∫Ω
            st.image(image, caption="H√¨nh ·∫£nh ƒë√£ v·∫Ω (28x28)", width=100)

            # D·ª± ƒëo√°n
            if st.button("Nh·∫≠n di·ªán ch·ªØ s·ªë"):
                # Chu·∫©n b·ªã d·ªØ li·ªáu cho m√¥ h√¨nh (Flatten th√†nh vector 784 chi·ªÅu)
                input_data = image.reshape(1, 28 * 28)
                input_data_scaled = scaler.fit_transform(input_data) if model_choice in ["SVM (Support Vector Machine)", "Decision Tree"] else input_data

                prediction = model.predict(input_data_scaled)
                predicted_digit = np.argmax(prediction) if model_choice in ["SVM (Support Vector Machine)", "Decision Tree"] else None
                confidence = np.max(prediction) * 100 if model_choice in ["SVM (Support Vector Machine)", "Decision Tree"] else None

                if predicted_digit is not None and confidence is not None:
                    st.write(f"D·ª± ƒëo√°n: {predicted_digit}")
                    st.write(f"ƒê·ªô tin c·∫≠y: {confidence:.2f}%")
                else:
                    st.write("M√¥ h√¨nh n√†y l√† ph√¢n c·ª•m (K-means/DBSCAN), kh√¥ng d·ª± ƒëo√°n nh√£n. Vui l√≤ng s·ª≠ d·ª•ng SVM ho·∫∑c Decision Tree.")

                # Ki·ªÉm tra v√† k·∫øt th√∫c run hi·ªán t·∫°i n·∫øu c√≥
                # S·ª≠a ƒë·ªïi b·ªüi Grok 3: Th√™m log d·ª± ƒëo√°n v√† model_choice v√†o MLflow
                active_run = mlflow.active_run()
                if active_run:
                    mlflow.end_run()

                with mlflow.start_run(run_name=f"MNIST_Prediction_{experiment_name}"):
                    # Log d·ªØ li·ªáu ƒë·∫ßu v√†o, k·∫øt qu·∫£ d·ª± ƒëo√°n, v√† model_choice
                    mlflow.log_param("input_image_shape", image.shape)
                    mlflow.log_param("predicted_digit", predicted_digit if predicted_digit else "N/A")
                    mlflow.log_param("confidence", confidence if confidence else "N/A")
                    mlflow.log_param("model_run_id", selected_run_id)
                    mlflow.log_param("model_used", model_choice)  # Log model_choice
                    mlflow.log_text(str(image.flatten()), "input_image.txt")  # Log d∆∞·ªõi d·∫°ng chu·ªói ƒë·ªÉ tr√°nh l·ªói bytes

                    st.success(f"K·∫øt qu·∫£ d·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c log v√†o MLflow th√†nh c√¥ng!\n- Experiment: '{experiment_name}'\n- Run ID: {mlflow.active_run().info.run_id}\n- Li√™n k·∫øt: [Xem trong MLflow UI](http://127.0.0.1:5000/#/experiments/{mlflow.get_experiment_by_name(experiment_name).experiment_id}/runs/{mlflow.active_run().info.run_id})")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ d·ª± ƒëo√°n t·ª´ MLflow (kh√¥ng d√πng session)
    # S·ª≠a ƒë·ªïi b·ªüi Grok 3: Lo·∫°i b·ªè session, hi·ªÉn th·ªã t·ª´ MLflow
    st.subheader("L·ªãch s·ª≠ D·ª± ƒëo√°n ƒê√£ L∆∞u t·ª´ MLflow")
    prediction_runs = mlflow.search_runs(experiment_names=[experiment_name], filter_string="tags.mlflow.runName LIKE 'MNIST_Prediction%'")
    if not prediction_runs.empty:
        st.write("Danh s√°ch c√°c d·ª± ƒëo√°n g·∫ßn ƒë√¢y:")
        for _, run in prediction_runs.iterrows():
            pred_digit = run.data.params.get("predicted_digit", "N/A")
            confidence = run.data.params.get("confidence", "N/A")
            timestamp = run.info.start_time
            st.write(f"--- D·ª± ƒëo√°n ---")
            st.write(f"Ch·ªØ s·ªë d·ª± ƒëo√°n: {pred_digit}")
            st.write(f"ƒê·ªô tin c·∫≠y: {confidence}%")
            st.write(f"Th·ªùi gian: {pd.Timestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')}")
            # T·∫£i v√† hi·ªÉn th·ªã h√¨nh ·∫£nh t·ª´ MLflow
            image_path = mlflow.artifacts.download_artifacts(run_id=run.run_id, path="input_image.txt")
            with open(image_path, 'r') as f:
                image_data = np.array([float(x) for x in f.read().split()]).reshape(28, 28)
            st.image(image_data, caption=f"H√¨nh ·∫£nh ƒë√£ v·∫Ω cho d·ª± ƒëo√°n {pred_digit}", width=100)
    else:
        st.write("Ch∆∞a c√≥ d·ª± ƒëo√°n n√†o ƒë∆∞·ª£c log v√†o MLflow. Vui l√≤ng th·ª±c hi·ªán d·ª± ƒëo√°n ƒë·ªÉ xem l·ªãch s·ª≠.")

if __name__ == "__main__":
    show_mnist_demo()
import streamlit as st
import numpy as np
import mlflow
import mlflow.sklearn
import os
import datetime
from PIL import Image
from streamlit_drawable_canvas import st_canvas
import logging

# T·∫Øt log kh√¥ng c·∫ßn thi·∫øt
logging.getLogger("mlflow").setLevel(logging.WARNING)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # T·∫Øt log TensorFlow
os.environ["CUDA_VISIBLE_DEVICES"] = ""  # Ch·∫°y tr√™n CPU

def mlflow_input():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/VietNam0410/ML_v3.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)
    os.environ["MLFLOW_TRACKING_USERNAME"] = "VietNam0410"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "c9db6bdcca1dfed76d2af2cdb15a9277e6732d6b"
    
    try:
        client = mlflow.tracking.MlflowClient()
        experiments = client.search_experiments()
        if experiments:
            st.success('K·∫øt n·ªëi MLflow v·ªõi DagsHub th√†nh c√¥ng! ‚úÖ')
        else:
            st.warning('Kh√¥ng t√¨m th·∫•y experiment n√†o, nh∆∞ng k·∫øt n·ªëi MLflow v·∫´n ho·∫°t ƒë·ªông.')
        return DAGSHUB_MLFLOW_URI
    except mlflow.exceptions.MlflowException as e:
        st.error(f'L·ªói x√°c th·ª±c MLflow: {str(e)}. Vui l√≤ng ki·ªÉm tra token t·∫°i https://dagshub.com/user/settings/tokens.')
        return None

def get_mlflow_runs(experiment_name: str = "MNIST_Training"):
    try:
        client = mlflow.tracking.MlflowClient()
        experiment = client.get_experiment_by_name(experiment_name)
        if not experiment:
            st.error(f"Kh√¥ng t√¨m th·∫•y experiment '{experiment_name}' trong MLflow. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return []
        experiment_id = experiment.experiment_id
        
        # L·∫•y t·∫•t c·∫£ c√°c run
        runs = client.search_runs([experiment_id], order_by=["start_time DESC"])
        
        # L·ªçc c√°c run c√≥ ch·ª©a model
        valid_runs = [
            run for run in runs 
            if client.list_artifacts(run.info.run_id, "model")
        ]
        
        if not valid_runs:
            st.error("Kh√¥ng t√¨m th·∫•y run n√†o trong experiment 'MNIST_Training' ch·ª©a 'model'. Vui l√≤ng ki·ªÉm tra l·∫°i MLflow.")
        return valid_runs
    except mlflow.exceptions.MlflowException as e:
        st.error(f"Kh√¥ng th·ªÉ l·∫•y danh s√°ch c√°c run t·ª´ MLflow: {str(e)}")
        return []

def load_model_from_mlflow(run_id: str):
    try:
        model = mlflow.sklearn.load_model(f"runs:/{run_id}/model")
        return model
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh t·ª´ Run ID {run_id}: {str(e)}.")
        return None

def preprocess_image(image):
    image = image.resize((28, 28), Image.Resampling.LANCZOS).convert('L')
    image_array = np.array(image)
    threshold = 127
    image_array = (image_array < threshold).astype(np.float32)
    image_array = 1 - image_array  # ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ kh·ªõp d·ªØ li·ªáu hu·∫•n luy·ªán
    return image_array.reshape(1, 28 * 28)

def mnist_demo():
    st.title("D·ª± ƒëo√°n Ch·ªØ s·ªë MNIST üé®")

    # Ki·ªÉm tra k·∫øt n·ªëi MLflow
    if 'dagshub_initialized' not in st.session_state:
        DAGSHUB_URI = mlflow_input()
        if DAGSHUB_URI is None:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow. ·ª®ng d·ª•ng s·∫Ω d·ª´ng.")
            return
        st.session_state['dagshub_initialized'] = True
        st.session_state['mlflow_url'] = DAGSHUB_URI

    # ƒê·∫£m b·∫£o kh√¥ng c√≥ active run tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
    if mlflow.active_run():
        mlflow.end_run()

    st.header("B∆∞·ªõc 1: Ch·ªçn M√¥ h√¨nh")
    runs = get_mlflow_runs("MNIST_Training")
    if not runs:
        return

    # Hi·ªÉn th·ªã danh s√°ch run: s·ª≠ d·ª•ng run_name v√† th·ªùi gian
    run_options = [
        f"{run.data.tags.get('mlflow.runName', 'Kh√¥ng t√™n')} (Th·ªùi gian: {datetime.datetime.fromtimestamp(run.info.start_time / 1000).strftime('%Y-%m-%d %H:%M:%S') if run.info.start_time else 'Kh√¥ng r√µ'})"
        for run in runs
    ]
    run_id_map = {option: run.info.run_id for option, run in zip(run_options, runs)}
    
    selected_run = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán", options=run_options, key="model_select")
    selected_run_id = run_id_map[selected_run]

    # T·∫£i m√¥ h√¨nh
    model = None
    with st.spinner(f"ƒêang t·∫£i m√¥ h√¨nh t·ª´ MLflow (Run: {selected_run})..."):
        model = load_model_from_mlflow(selected_run_id)
        if model is None:
            return
        st.success(f"ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng t·ª´ Run: {selected_run}")

    st.header("B∆∞·ªõc 2: Nh·∫≠p Ch·ªØ s·ªë")
    input_method = st.radio("Ch·ªçn c√°ch nh·∫≠p d·ªØ li·ªáu:", ["V·∫Ω tr√™n canvas", "T·∫£i l√™n ·∫£nh"], key="input_method")

    input_data = None
    image = None
    if input_method == "V·∫Ω tr√™n canvas":
        canvas_result = st_canvas(
            fill_color="white",
            stroke_width=10,
            stroke_color="black",
            background_color="white",
            height=280,
            width=280,
            drawing_mode="freedraw",
            key="canvas",
            # Kh√¥ng c√≥ t√πy ch·ªçn x√≥a b·∫£ng
            update_streamlit=True
        )
        if canvas_result.image_data is not None:
            image = Image.fromarray(canvas_result.image_data)
            input_data = preprocess_image(image)
            st.image(image, caption="H√¨nh ·∫£nh b·∫°n v·∫Ω", width=280)

    else:
        uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh (PNG/JPG, 28x28, ƒëen tr√™n n·ªÅn tr·∫Øng)", type=["png", "jpg", "jpeg"])
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            input_data = preprocess_image(image)
            st.image(image, caption="H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n", width=280)

    if input_data is not None and st.button("D·ª± ƒëo√°n", key="predict_button"):
        with st.spinner("ƒêang d·ª± ƒëo√°n..."):
            try:
                # B·ªè b∆∞·ªõc s·ª≠ d·ª•ng scaler, d·ª± ƒëo√°n tr·ª±c ti·∫øp v·ªõi m√¥ h√¨nh
                prediction = model.predict(input_data)[0]
                confidence = model.predict_proba(input_data)[0][prediction] if hasattr(model, "predict_proba") else 0.5

                st.header("B∆∞·ªõc 3: K·∫øt qu·∫£")
                st.write(f"**Ch·ªØ s·ªë d·ª± ƒëo√°n**: {prediction}")
                st.write(f"**ƒê·ªô tin c·∫≠y**: {confidence:.2%}")
                st.image(image, caption=f"D·ª± ƒëo√°n: {prediction} (ƒê·ªô tin c·∫≠y: {confidence:.2%})", width=280)

                # L∆∞u k·∫øt qu·∫£ v√†o MLflow
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                run_name = f"Prediction_{input_method.replace(' ', '_')}_{timestamp}"
                with st.spinner("ƒêang l∆∞u k·∫øt qu·∫£ v√†o MLflow..."):
                    client = mlflow.tracking.MlflowClient()
                    experiment = client.get_experiment_by_name("MNIST_Demo")
                    experiment_id = experiment.experiment_id if experiment else client.create_experiment("MNIST_Demo")
                    with mlflow.start_run(run_name=run_name, experiment_id=experiment_id) as run:
                        # L∆∞u c√°c tham s·ªë
                        mlflow.log_param("model_run_id", selected_run_id)
                        mlflow.log_param("predicted_digit", prediction)
                        mlflow.log_param("confidence", confidence)
                        mlflow.log_param("input_method", input_method)

                        # L∆∞u h√¨nh ·∫£nh ƒë·∫ßu v√†o d∆∞·ªõi d·∫°ng artifact
                        image_path = f"input_image_{timestamp}.png"
                        image.save(image_path)
                        mlflow.log_artifact(image_path, "input_images")
                        os.remove(image_path)  # X√≥a file t·∫°m sau khi l∆∞u v√†o MLflow

                        run_id = run.info.run_id

                st.success(f"K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MLflow (Run ID: {run_id})")
                st.markdown(f"Xem chi ti·∫øt t·∫°i: [{st.session_state['mlflow_url']}]({st.session_state['mlflow_url']})")

            except Exception as e:
                st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {str(e)}")
                return

import streamlit as st
import numpy as np
import mlflow
import mlflow.sklearn
import os
import datetime
from PIL import Image
from streamlit_drawable_canvas import st_canvas
import logging

# T·∫Øt c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt
logging.getLogger("mlflow").setLevel(logging.ERROR)

# H√†m kh·ªüi t·∫°o MLflow
def mlflow_input():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/VietNam0410/ML_v3.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)
    os.environ["MLFLOW_TRACKING_USERNAME"] = "VietNam0410"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "c9db6bdcca1dfed76d2af2cdb15a9277e6732d6b"
    
    try:
        client = mlflow.tracking.MlflowClient()
        experiments = client.search_experiments()
        if experiments:
            st.success('K·∫øt n·ªëi MLflow v·ªõi DagsHub th√†nh c√¥ng! ‚úÖ')
        else:
            st.warning('Kh√¥ng t√¨m th·∫•y experiment n√†o, nh∆∞ng k·∫øt n·ªëi MLflow v·∫´n ho·∫°t ƒë·ªông.')
        return DAGSHUB_MLFLOW_URI
    except mlflow.exceptions.MlflowException as e:
        st.error(f'L·ªói x√°c th·ª±c MLflow: {str(e)}. Vui l√≤ng ki·ªÉm tra token t·∫°i https://dagshub.com/user/settings/tokens.')
        return None

# H√†m l·∫•y danh s√°ch c√°c run t·ª´ MLflow
def get_mlflow_runs(experiment_name: str = "MNIST_Training"):
    """L·∫•y danh s√°ch c√°c run t·ª´ MLflow, l·ªçc c√°c run c√≥ m√¥ h√¨nh v√† scaler."""
    try:
        client = mlflow.tracking.MlflowClient()
        experiment = client.get_experiment_by_name(experiment_name)
        if not experiment:
            st.error(f"Kh√¥ng t√¨m th·∫•y experiment '{experiment_name}' trong MLflow.")
            return []
        experiment_id = experiment.experiment_id
        runs = client.search_runs([experiment_id], order_by=["metrics.valid_accuracy DESC"])
        runs_with_model = [
            run for run in runs 
            if client.list_artifacts(run.info.run_id, "model") and client.list_artifacts(run.info.run_id, "scaler")
        ]
        return runs_with_model
    except mlflow.exceptions.MlflowException as e:
        st.error(f"Kh√¥ng th·ªÉ l·∫•y danh s√°ch c√°c run t·ª´ MLflow: {str(e)}")
        return []

# H√†m x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o
def preprocess_image(image):
    """Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh m·∫£ng 28x28 pixel (normalized 0-1)."""
    image = image.resize((28, 28), Image.Resampling.LANCZOS).convert('L')
    image_array = np.array(image)
    threshold = 127
    image_array = (image_array < threshold).astype(np.float32)
    image_array = 1 - image_array  # ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ kh·ªõp d·ªØ li·ªáu hu·∫•n luy·ªán (ƒëen = 1, tr·∫Øng = 0)
    return image_array.reshape(1, 28 * 28)

# H√†m ch√≠nh
def mnist_demo():
    st.title("D·ª± ƒëo√°n Ch·ªØ s·ªë MNIST üé®")

    # Kh·ªüi t·∫°o MLflow
    if 'dagshub_initialized' not in st.session_state:
        DAGSHUB_URI = mlflow_input()
        if DAGSHUB_URI is None:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow. ·ª®ng d·ª•ng s·∫Ω d·ª´ng.")
            return
        st.session_state['dagshub_initialized'] = True
        st.session_state['mlflow_url'] = DAGSHUB_URI

    # ƒê√≥ng run MLflow n·∫øu ƒëang m·ªü
    if mlflow.active_run():
        mlflow.end_run()

    # Ph·∫ßn 1: Ch·ªçn m√¥ h√¨nh t·ª´ MLflow
    st.header("B∆∞·ªõc 1: Ch·ªçn M√¥ h√¨nh")
    runs = get_mlflow_runs("MNIST_Training")
    if not runs:
        st.error("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh n√†o trong 'MNIST_Training'. Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
        st.info("Ch·∫°y file 'train_mnist.py' ƒë·ªÉ t·∫°o m√¥ h√¨nh.")
        return

    run_options = [
        f"{run.data.tags.get('mlflow.runName', 'Kh√¥ng t√™n')} (ƒê·ªô ch√≠nh x√°c: {run.data.metrics.get('valid_accuracy', 0):.4f}, Th·ªùi gian: {datetime.datetime.fromtimestamp(run.info.start_time / 1000).strftime('%Y-%m-%d %H:%M:%S') if run.info.start_time else 'Kh√¥ng r√µ'}) - ID: {run.info.run_id}"
        for run in runs
    ]
    selected_run = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán", options=run_options, key="model_select")
    selected_run_id = selected_run.split(" - ID: ")[-1]

    # T·∫£i m√¥ h√¨nh v√† scaler
    model = None
    scaler = None
    with st.spinner(f"ƒêang t·∫£i m√¥ h√¨nh v√† scaler t·ª´ MLflow (Run ID: {selected_run_id})..."):
        try:
            model = mlflow.sklearn.load_model(f"runs:/{selected_run_id}/model")
            scaler = mlflow.sklearn.load_model(f"runs:/{selected_run_id}/scaler")
            st.success(f"ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng t·ª´ Run ID: {selected_run_id}")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ho·∫∑c scaler: {str(e)}. ƒê·∫£m b·∫£o run ch·ª©a 'model' v√† 'scaler'.")
            return

    # Ph·∫ßn 2: Nh·∫≠p d·ªØ li·ªáu
    st.header("B∆∞·ªõc 2: Nh·∫≠p Ch·ªØ s·ªë")
    input_method = st.radio("Ch·ªçn c√°ch nh·∫≠p d·ªØ li·ªáu:", ["V·∫Ω tr√™n canvas", "T·∫£i l√™n ·∫£nh"], key="input_method")

    input_data = None
    image = None
    if input_method == "V·∫Ω tr√™n canvas":
        canvas_result = st_canvas(
            fill_color="white",
            stroke_width=10,
            stroke_color="black",
            background_color="white",
            height=280,
            width=280,
            drawing_mode="freedraw",
            key="canvas"
        )
        if canvas_result.image_data is not None:
            image = Image.fromarray(canvas_result.image_data)
            input_data = preprocess_image(image)
            st.image(image, caption="H√¨nh ·∫£nh b·∫°n v·∫Ω", width=280)

    else:  # T·∫£i l√™n ·∫£nh
        uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh (PNG/JPG, 28x28, ƒëen tr√™n n·ªÅn tr·∫Øng)", type=["png", "jpg", "jpeg"])
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            input_data = preprocess_image(image)
            st.image(image, caption="H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n", width=280)

    # Ph·∫ßn 3: D·ª± ƒëo√°n v√† l∆∞u k·∫øt qu·∫£
    if input_data is not None and st.button("D·ª± ƒëo√°n", key="predict_button"):
        with st.spinner("ƒêang d·ª± ƒëo√°n..."):
            X_input_scaled = scaler.transform(input_data)
            prediction = model.predict(X_input_scaled)[0]
            confidence = model.predict_proba(X_input_scaled)[0][prediction] if hasattr(model, "predict_proba") else 0.5

            st.header("B∆∞·ªõc 3: K·∫øt qu·∫£")
            st.write(f"**Ch·ªØ s·ªë d·ª± ƒëo√°n**: {prediction}")
            st.write(f"**ƒê·ªô tin c·∫≠y**: {confidence:.2%}")
            st.image(image, caption=f"D·ª± ƒëo√°n: {prediction} (ƒê·ªô tin c·∫≠y: {confidence:.2%})", width=280)

            # Log v√†o MLflow (Experiment: MNIST_Demo)
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            run_name = f"Prediction_{input_method.replace(' ', '_')}_{timestamp}"
            with st.spinner("ƒêang l∆∞u k·∫øt qu·∫£ v√†o MLflow..."):
                client = mlflow.tracking.MlflowClient()
                experiment = client.get_experiment_by_name("MNIST_Demo")
                experiment_id = experiment.experiment_id if experiment else client.create_experiment("MNIST_Demo")
                with mlflow.start_run(run_name=run_name, experiment_id=experiment_id) as run:
                    mlflow.log_param("model_run_id", selected_run_id)
                    mlflow.log_param("predicted_digit", prediction)
                    mlflow.log_param("confidence", confidence)
                    mlflow.log_param("input_method", input_method)
                    run_id = run.info.run_id

            st.success(f"K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MLflow (Run ID: {run_id})")
            st.markdown(f"Xem chi ti·∫øt t·∫°i: [{st.session_state['mlflow_url']}]({st.session_state['mlflow_url']})")

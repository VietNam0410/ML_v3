import streamlit as st
import numpy as np
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import mlflow
import os

# Thi·∫øt l·∫≠p MLflow Tracking URI c·ª•c b·ªô
if not os.path.exists('mlruns'):
    os.makedirs('mlruns')
mlflow.set_tracking_uri(f"file://{os.path.abspath('mlruns')}")

def train_mnist():
    st.header("Hu·∫•n luy·ªán M√¥ h√¨nh Nh·∫≠n di·ªán Ch·ªØ s·ªë MNIST üßÆ")

    # Cho ng∆∞·ªùi d√πng ƒë·∫∑t t√™n Experiment
    experiment_name = st.text_input("Nh·∫≠p T√™n Experiment cho Hu·∫•n luy·ªán", value="MNIST_Training")
    if experiment_name:
        mlflow.set_experiment(experiment_name)
    
    # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω trong session t·ª´ preprocess_mnist.py
    if 'mnist_data' not in st.session_state or st.session_state['mnist_data'] is None:
        st.error("D·ªØ li·ªáu MNIST ƒë√£ x·ª≠ l√Ω kh√¥ng t√¨m th·∫•y. Vui l√≤ng ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST' tr∆∞·ªõc.")
        return

    # Ki·ªÉm tra key 'X_train' tr∆∞·ªõc khi truy c·∫≠p
    mnist_data = st.session_state['mnist_data']
    if 'X_train' not in mnist_data or 'y_train' not in mnist_data:
        st.error("D·ªØ li·ªáu 'X_train' ho·∫∑c 'y_train' kh√¥ng t·ªìn t·∫°i trong session. Vui l√≤ng ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω v√† chia d·ªØ li·ªáu trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST' tr∆∞·ªõc.")
        return

    st.subheader("D·ªØ li·ªáu MNIST ƒë√£ x·ª≠ l√Ω üìù")
    st.write("ƒê√¢y l√† d·ªØ li·ªáu sau c√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST':")
    st.write(f"S·ªë l∆∞·ª£ng m·∫´u hu·∫•n luy·ªán: {len(mnist_data['X_train'])}")
    st.write(f"S·ªë l∆∞·ª£ng m·∫´u validation: {len(mnist_data.get('X_valid', []))}")
    st.write(f"S·ªë l∆∞·ª£ng m·∫´u ki·ªÉm tra: {len(mnist_data['X_test'])}")

    # Chu·∫©n b·ªã d·ªØ li·ªáu: Flatten h√¨nh ·∫£nh 28x28 th√†nh vector 784 chi·ªÅu
    X_train = mnist_data['X_train'].reshape(-1, 28 * 28)
    y_train = mnist_data['y_train']
    X_valid = mnist_data.get('X_valid', mnist_data['X_test']).reshape(-1, 28 * 28)
    y_valid = mnist_data.get('y_valid', mnist_data['y_test'])

    # Chu·∫©n h√≥a d·ªØ li·ªáu cho c√°c m√¥ h√¨nh
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_valid_scaled = scaler.transform(X_valid)

    # X√¢y d·ª±ng v√† hu·∫•n luy·ªán m√¥ h√¨nh
    st.subheader("X√¢y d·ª±ng v√† Hu·∫•n luy·ªán M√¥ h√¨nh üéØ")
    model_choice = st.selectbox(
        "Ch·ªçn lo·∫°i m√¥ h√¨nh",
        ["SVM (Support Vector Machine)", "Decision Tree"]
    )

    # Tham s·ªë hu·∫•n luy·ªán cho t·ª´ng m√¥ h√¨nh
    if model_choice == "SVM (Support Vector Machine)":
        kernel = st.selectbox("Ch·ªçn kernel SVM", ["linear", "rbf", "poly"], index=1)
        C = st.slider("C (Tham s·ªë ƒëi·ªÅu ch·ªânh)", 0.1, 10.0, 1.0, step=0.1)
        model_params = {"kernel": kernel, "C": C}
    else:  # Decision Tree
        max_depth = st.slider("ƒê·ªô s√¢u t·ªëi ƒëa", 1, 20, 10, step=1)
        min_samples_split = st.slider("S·ªë m·∫´u t·ªëi thi·ªÉu ƒë·ªÉ chia", 2, 20, 2, step=1)
        model_params = {"max_depth": max_depth, "min_samples_split": min_samples_split}

    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        # Ki·ªÉm tra v√† k·∫øt th√∫c run hi·ªán t·∫°i n·∫øu c√≥
        active_run = mlflow.active_run()
        if active_run:
            mlflow.end_run()

        with mlflow.start_run(run_name=f"{model_choice}_MNIST_{experiment_name}") as run:
            # Hu·∫•n luy·ªán m√¥ h√¨nh ph√¢n lo·∫°i
            if model_choice == "SVM (Support Vector Machine)":
                model = SVC(**model_params, random_state=42)
            else:  # Decision Tree
                model = DecisionTreeClassifier(**model_params, random_state=42)

            model.fit(X_train_scaled, y_train)
            train_acc = accuracy_score(y_train, model.predict(X_train_scaled))
            valid_acc = accuracy_score(y_valid, model.predict(X_valid_scaled))

            st.write(f"M√¥ h√¨nh ƒë√£ ch·ªçn: {model_choice}")
            st.write(f"Tham s·ªë: {model_params}")
            st.write(f"ƒê·ªô ch√≠nh x√°c hu·∫•n luy·ªán: {train_acc:.4f}")
            st.write(f"ƒê·ªô ch√≠nh x√°c validation: {valid_acc:.4f}")
            
            # Log m√¥ h√¨nh, scaler, v√† metrics v√†o MLflow
            mlflow.log_params(model_params)
            mlflow.log_param("model_type", model_choice)
            mlflow.log_metric("train_accuracy", train_acc)
            mlflow.log_metric("valid_accuracy", valid_acc)
            mlflow.sklearn.log_model(model, "model", input_example=X_train_scaled[:1])
            mlflow.sklearn.log_model(scaler, "scaler", input_example=X_train[:1])

            st.success(f"Hu·∫•n luy·ªán {model_choice} ho√†n t·∫•t v√† log v√†o MLflow th√†nh c√¥ng! ‚úÖ (Run ID: {run.info.run_id})")

            # L∆∞u m√¥ h√¨nh v√† scaler trong session ƒë·ªÉ d√πng cho demo
            st.session_state['mnist_model'] = model
            st.session_state['scaler'] = scaler
            st.session_state['training_metrics'] = {"train_accuracy": train_acc, "valid_accuracy": valid_acc}

if __name__ == "__main__":
    train_mnist()
import streamlit as st
import numpy as np
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import mlflow
import os
import dagshub

# Ph·∫ßn kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi DagsHub ƒë∆∞·ª£c comment ƒë·ªÉ kh√¥ng truy c·∫≠p ngay l·∫≠p t·ª©c
# with st.spinner("ƒêang k·∫øt n·ªëi v·ªõi DagsHub..."):
#     dagshub.init(repo_owner='VietNam0410', repo_name='vn0410', mlflow=True)
#     mlflow.set_tracking_uri(f"https://dagshub.com/VietNam0410/vn0410.mlflow")
# st.success("ƒê√£ k·∫øt n·ªëi v·ªõi DagsHub th√†nh c√¥ng!")

# H√†m chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi cache
@st.cache_data
def scale_data(X_train, X_valid):
    """Chu·∫©n h√≥a d·ªØ li·ªáu b·∫±ng StandardScaler v√† l∆∞u v√†o b·ªô nh·ªõ ƒë·ªám."""
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_valid_scaled = scaler.transform(X_valid)
    return X_train_scaled, X_valid_scaled, scaler

def train_mnist():
    st.header("Hu·∫•n luy·ªán M√¥ h√¨nh Nh·∫≠n di·ªán Ch·ªØ s·ªë MNIST üßÆ")

    # ƒê√≥ng b·∫•t k·ª≥ run n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ tr√°nh xung ƒë·ªôt khi b·∫Øt ƒë·∫ßu
    if mlflow.active_run():
        mlflow.end_run()
        st.info("ƒê√£ ƒë√≥ng run MLflow ƒëang ho·∫°t ƒë·ªông tr∆∞·ªõc ƒë√≥.")

    # Cho ng∆∞·ªùi d√πng ƒë·∫∑t t√™n Experiment (v·∫´n gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi MLflow n·∫øu c·∫ßn sau n√†y)
    experiment_name = st.text_input("Nh·∫≠p T√™n Experiment cho Hu·∫•n luy·ªán", value="MNIST_Training")
    # if experiment_name:
    #     with st.spinner("ƒêang thi·∫øt l·∫≠p Experiment tr√™n DagsHub..."):
    #         mlflow.set_experiment(experiment_name)

    if 'mnist_data' not in st.session_state or st.session_state['mnist_data'] is None:
        st.error("D·ªØ li·ªáu MNIST ƒë√£ x·ª≠ l√Ω kh√¥ng t√¨m th·∫•y. Vui l√≤ng ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST' tr∆∞·ªõc.")
        return

    mnist_data = st.session_state['mnist_data']
    if 'X_train' not in mnist_data or 'y_train' not in mnist_data:
        st.error("D·ªØ li·ªáu 'X_train' ho·∫∑c 'y_train' kh√¥ng t·ªìn t·∫°i trong session. Vui l√≤ng ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω v√† chia d·ªØ li·ªáu trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST' tr∆∞·ªõc.")
        return

    st.subheader("D·ªØ li·ªáu MNIST ƒë√£ x·ª≠ l√Ω üìù")
    st.write("ƒê√¢y l√† d·ªØ li·ªáu sau c√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω trong 'Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST':")
    st.write(f"S·ªë l∆∞·ª£ng m·∫´u hu·∫•n luy·ªán: {len(mnist_data['X_train'])}")
    st.write(f"S·ªë l∆∞·ª£ng m·∫´u validation: {len(mnist_data.get('X_valid', []))}")
    st.write(f"S·ªë l∆∞·ª£ng m·∫´u ki·ªÉm tra: {len(mnist_data['X_test'])}")

    # Reshape d·ªØ li·ªáu t·ª´ (n, 28, 28, 1) th√†nh (n, 784)
    X_train = mnist_data['X_train'].reshape(-1, 28 * 28)
    y_train = mnist_data['y_train']
    X_valid = mnist_data.get('X_valid', mnist_data['X_test']).reshape(-1, 28 * 28)
    y_valid = mnist_data.get('y_valid', mnist_data['y_test'])

    # Chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi cache
    X_train_scaled, X_valid_scaled, scaler = scale_data(X_train, X_valid)

    st.subheader("X√¢y d·ª±ng v√† Hu·∫•n luy·ªán M√¥ h√¨nh üéØ")
    model_choice = st.selectbox(
        "Ch·ªçn lo·∫°i m√¥ h√¨nh",
        ["SVM (Support Vector Machine)", "Decision Tree"]
    )

    if model_choice == "SVM (Support Vector Machine)":
        kernel = st.selectbox("Ch·ªçn kernel SVM", ["linear", "rbf", "poly"], index=1)
        C = st.slider("C (Tham s·ªë ƒëi·ªÅu ch·ªânh)", 0.1, 10.0, 1.0, step=0.1)
        model_params = {"kernel": kernel, "C": C}
    else:
        max_depth = st.slider("ƒê·ªô s√¢u t·ªëi ƒëa", 1, 20, 10, step=1)
        min_samples_split = st.slider("S·ªë m·∫´u t·ªëi thi·ªÉu ƒë·ªÉ chia", 2, 20, 2, step=1)
        model_params = {"max_depth": max_depth, "min_samples_split": min_samples_split}

    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
            if model_choice == "SVM (Support Vector Machine)":
                model = SVC(**model_params, random_state=42)
            else:
                model = DecisionTreeClassifier(**model_params, random_state=42)

            model.fit(X_train_scaled, y_train)
            train_acc = accuracy_score(y_train, model.predict(X_train_scaled))
            valid_acc = accuracy_score(y_valid, model.predict(X_valid_scaled))

            st.write(f"M√¥ h√¨nh ƒë√£ ch·ªçn: {model_choice}")
            st.write(f"Tham s·ªë: {model_params}")
            st.write(f"ƒê·ªô ch√≠nh x√°c hu·∫•n luy·ªán: {train_acc:.4f}")
            st.write(f"ƒê·ªô ch√≠nh x√°c validation: {valid_acc:.4f}")
            st.success(f"Hu·∫•n luy·ªán {model_choice} ho√†n t·∫•t c·ª•c b·ªô ‚úÖ.")

            # L∆∞u m√¥ h√¨nh c·ª•c b·ªô (t√πy ch·ªçn) ƒë·ªÉ s·ª≠ d·ª•ng sau
            model_file = "exercises/exercise_mnist/model.pkl"
            os.makedirs(os.path.dirname(model_file), exist_ok=True)
            with open(model_file, "wb") as f:
                import pickle
                pickle.dump(model, f)
            st.info(f"M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u c·ª•c b·ªô t·∫°i: {model_file}")

            # Comment ph·∫ßn logging v√†o MLflow/DagsHub
            # with mlflow.start_run(run_name=f"{model_choice}_MNIST_{experiment_name}") as run:
            #     mlflow.log_params(model_params)
            #     mlflow.log_param("model_type", model_choice)
            #     mlflow.log_metric("train_accuracy", train_acc)
            #     mlflow.log_metric("valid_accuracy", valid_acc)
            #     mlflow.sklearn.log_model(model, "model", input_example=X_train_scaled[:1])
            #     mlflow.sklearn.log_model(scaler, "scaler", input_example=X_train[:1])

            #     run_id = run.info.run_id
            #     dagshub_link = f"https://dagshub.com/VietNam0410/vn0410/experiments/#/experiment/{experiment_name}/{run_id}"
            #     st.success(f"Hu·∫•n luy·ªán {model_choice} ho√†n t·∫•t v√† log v√†o MLflow th√†nh c√¥ng! ‚úÖ (Run ID: {run_id})")
            #     st.markdown(f"Xem chi ti·∫øt t·∫°i: [DagsHub Experiment]({dagshub_link})")

            st.session_state['mnist_model'] = model
            st.session_state['scaler'] = scaler
            st.session_state['training_metrics'] = {"train_accuracy": train_acc, "valid_accuracy": valid_acc}

if __name__ == "__main__":
    train_mnist()
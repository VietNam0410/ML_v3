import streamlit as st
import numpy as np
import mlflow
import mlflow.sklearn
import matplotlib.pyplot as plt
import seaborn as sns
import os
import dagshub

# Thi·∫øt l·∫≠p th√¥ng tin DagsHub
DAGSHUB_USERNAME = "VietNam0410"
DAGSHUB_REPO = "vn0410"

try:
    with st.spinner("ƒêang k·∫øt n·ªëi v·ªõi DagsHub..."):
        dagshub.init(repo_owner=DAGSHUB_USERNAME, repo_name=DAGSHUB_REPO, mlflow=True)
        mlflow.set_tracking_uri(f"https://dagshub.com/{DAGSHUB_USERNAME}/{DAGSHUB_REPO}.mlflow")
        os.environ["MLFLOW_TRACKING_USERNAME"] = DAGSHUB_USERNAME
        os.environ["MLFLOW_TRACKING_PASSWORD"] = os.getenv("MLFLOW_TRACKING_PASSWORD", "")
    st.success("ƒê√£ k·∫øt n·ªëi v·ªõi DagsHub th√†nh c√¥ng!")
except Exception as e:
    st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi DagsHub: {str(e)}. S·ª≠ d·ª•ng MLflow c·ª•c b·ªô.")
    mlflow.set_tracking_uri(f"file://{os.path.abspath('mlruns')}")

def demo():
    st.header("Demo Gi·∫£m chi·ªÅu MNIST v·ªõi PCA v√† t-SNE üñåÔ∏è")
    experiment_name = "MNIST_DimReduction"

    # Ki·ªÉm tra d·ªØ li·ªáu v√† m√¥ h√¨nh t·ª´ train
    if 'mnist_data' not in st.session_state:
        st.error("Vui l√≤ng ch·∫°y ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu trong 'preprocess.py' tr∆∞·ªõc.")
        return
    if 'pca_model' not in st.session_state and 'tsne_model' not in st.session_state:
        st.error("Vui l√≤ng hu·∫•n luy·ªán √≠t nh·∫•t m·ªôt m√¥ h√¨nh trong 'train.py' tr∆∞·ªõc.")
        return

    mnist_data = st.session_state['mnist_data']
    y_valid = mnist_data['y_valid']
    y_test = mnist_data['y_test']

    # Ch·ªçn t·∫≠p d·ªØ li·ªáu ƒë·ªÉ demo
    dataset_choice = st.selectbox("Ch·ªçn t·∫≠p d·ªØ li·ªáu ƒë·ªÉ tr·ª±c quan h√≥a", ["Validation", "Test"])
    if dataset_choice == "Validation":
        y_subset = y_valid
    else:
        y_subset = y_test

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ PCA
    if 'pca_model' in st.session_state:
        st.subheader("K·∫øt qu·∫£ PCA")
        X_valid_pca = st.session_state['X_valid_pca'] if dataset_choice == "Validation" else st.session_state['X_test_pca']
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.scatterplot(x=X_valid_pca[:, 0], y=X_valid_pca[:, 1], hue=y_subset, palette="tab10", ax=ax, s=10)
        ax.set_title(f"PCA Visualization ({dataset_choice} Set)")
        ax.set_xlabel("PCA Component 1")
        ax.set_ylabel("PCA Component 2")
        st.pyplot(fig)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t-SNE
    if 'tsne_model' in st.session_state:
        st.subheader("K·∫øt qu·∫£ t-SNE")
        X_valid_tsne = st.session_state['X_valid_tsne'] if dataset_choice == "Validation" else st.session_state['X_test_tsne']
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.scatterplot(x=X_valid_tsne[:, 0], y=X_valid_tsne[:, 1], hue=y_subset, palette="tab10", ax=ax, s=10)
        ax.set_title(f"t-SNE Visualization ({dataset_choice} Set)")
        ax.set_xlabel("t-SNE Component 1")
        ax.set_ylabel("t-SNE Component 2")
        st.pyplot(fig)

    # T·∫£i runs t·ª´ MLflow ƒë·ªÉ xem l·ªãch s·ª≠
    if st.button("Xem l·ªãch s·ª≠ hu·∫•n luy·ªán t·ª´ DagsHub"):
        with st.spinner("ƒêang t·∫£i l·ªãch s·ª≠ Runs t·ª´ DagsHub..."):
            runs = mlflow.search_runs(experiment_names=[experiment_name])
            if not runs.empty:
                st.write("Danh s√°ch Runs ƒë√£ hu·∫•n luy·ªán:")
                st.write(runs[['run_id', 'tags.mlflow.runName', 'params.method', 'start_time']])
            else:
                st.write("Ch∆∞a c√≥ run n√†o ƒë∆∞·ª£c log.")

if __name__ == "__main__":
    demo()
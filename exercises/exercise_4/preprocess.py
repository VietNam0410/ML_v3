import streamlit as st
import numpy as np
import pandas as pd
import openml
from sklearn.model_selection import train_test_split
import mlflow
import os
import dagshub
import datetime

# H√†m kh·ªüi t·∫°o MLflow
def mlflow_input():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/VietNam0410/vn0410.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)
    st.session_state['mlflow_url'] = DAGSHUB_MLFLOW_URI
    os.environ["MLFLOW_TRACKING_USERNAME"] = "VietNam0410"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "22fd02345f8ff45482a20960058627630acaf190"  # Thay b·∫±ng token c√° nh√¢n c·ªßa b·∫°n
    DAGSHUB_REPO = "vn0410"
    return DAGSHUB_REPO

# Cache d·ªØ li·ªáu MNIST
@st.cache_data
def load_mnist_data():
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML..."):
        dataset = openml.datasets.get_dataset(554)
        X, y, _, _ = dataset.get_data(target='class')
        X = X.values.reshape(-1, 28 * 28) / 255.0  # Chu·∫©n h√≥a v·ªÅ [0, 1]
        y = y.astype(np.int32)
    return X, y

def preprocess():
    st.header("Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu MNIST üßÆ")

    # G·ªçi h√†m mlflow_input ƒë·ªÉ thi·∫øt l·∫≠p MLflow t·∫°i DAGSHUB_MLFLOW_URI
    DAGSHUB_REPO = mlflow_input()

    # Cho ng∆∞·ªùi d√πng ƒë·∫∑t t√™n Experiment
    experiment_name = st.text_input("Nh·∫≠p t√™n Experiment", value="MNIST_Preprocess")
    with st.spinner("ƒêang thi·∫øt l·∫≠p Experiment tr√™n DagsHub MLflow..."):
        try:
            client = mlflow.tracking.MlflowClient()
            experiment = client.get_experiment_by_name(experiment_name)
            if experiment and experiment.lifecycle_stage == "deleted":
                st.warning(f"Experiment '{experiment_name}' ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥. Vui l√≤ng ch·ªçn t√™n kh√°c ho·∫∑c kh√¥i ph·ª•c experiment qua DagsHub UI.")
                new_experiment_name = st.text_input("Nh·∫≠p t√™n Experiment m·ªõi", value=f"{experiment_name}_Restored_{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                if new_experiment_name:
                    mlflow.set_experiment(new_experiment_name)
                    experiment_name = new_experiment_name
                else:
                    st.error("Vui l√≤ng nh·∫≠p t√™n experiment m·ªõi ƒë·ªÉ ti·∫øp t·ª•c.")
                    return
            else:
                mlflow.set_experiment(experiment_name)
        except Exception as e:
            st.error(f"L·ªói khi thi·∫øt l·∫≠p experiment: {str(e)}")
            return

    # T·∫£i d·ªØ li·ªáu MNIST
    if 'X_full' not in st.session_state or 'y_full' not in st.session_state:
        st.session_state['X_full'], st.session_state['y_full'] = load_mnist_data()
        st.success(f"ƒê√£ t·∫£i d·ªØ li·ªáu MNIST: {st.session_state['X_full'].shape[0]} m·∫´u, {st.session_state['X_full'].shape[1]} ƒë·∫∑c tr∆∞ng")

    X_full = st.session_state['X_full']
    y_full = st.session_state['y_full']

    # Ch·ªçn s·ªë m·∫´u
    max_samples = st.slider("Ch·ªçn s·ªë m·∫´u ƒë·ªÉ x·ª≠ l√Ω (√≠t h∆°n ƒë·ªÉ nhanh h∆°n)", 100, X_full.shape[0], 1000, key="max_samples_slider")
    if max_samples < X_full.shape[0]:
        indices = np.random.choice(X_full.shape[0], max_samples, replace=False)
        X_subset = X_full[indices]
        y_subset = y_full[indices]
    else:
        X_subset = X_full
        y_subset = y_full

    # Chia t·∫≠p d·ªØ li·ªáu: test tr∆∞·ªõc, sau ƒë√≥ train/validation
    st.subheader("Chia t·∫≠p d·ªØ li·ªáu")
    test_size = st.slider("T·ª∑ l·ªá t·∫≠p ki·ªÉm tra (%)", 10, 50, 20, key="test_size_slider") / 100
    remaining_size = 1 - test_size
    train_size_relative = st.slider("T·ª∑ l·ªá t·∫≠p hu·∫•n luy·ªán (trong ph·∫ßn c√≤n l·∫°i) (%)", 10, 90, 70, key="train_size_slider") / 100

    # T√≠nh to√°n t·ª∑ l·ªá th·ª±c t·∫ø
    train_size = remaining_size * train_size_relative
    valid_size = remaining_size * (1 - train_size_relative)

    # Hi·ªÉn th·ªã t·ª∑ l·ªá th·ª±c t·∫ø
    st.write(f"T·ª∑ l·ªá th·ª±c t·∫ø: Hu·∫•n luy·ªán {train_size*100:.1f}%, Validation {valid_size*100:.1f}%, Ki·ªÉm tra {test_size*100:.1f}%")
    st.write(f"Ki·ªÉm tra t·ªïng t·ª∑ l·ªá: {train_size*100 + valid_size*100 + test_size*100:.1f}% (ph·∫£i lu√¥n b·∫±ng 100%)")

    # Cho ph√©p ng∆∞·ªùi d√πng ƒë·∫∑t t√™n run ID cho vi·ªác chia d·ªØ li·ªáu
    run_name = st.text_input("Nh·∫≠p t√™n Run ID cho vi·ªác chia d·ªØ li·ªáu (ƒë·ªÉ tr·ªëng ƒë·ªÉ t·ª± ƒë·ªông t·∫°o)", value="", max_chars=20, key="data_split_run_name_input")
    if run_name.strip() == "":
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        run_name = f"MNIST_DataSplit_{timestamp.replace(' ', '_').replace(':', '-')}"  # ƒê·ªãnh d·∫°ng t√™n run h·ª£p l·ªá cho MLflow

    if st.button("Chia d·ªØ li·ªáu"):
        with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
            # Chia t·∫≠p test tr∆∞·ªõc
            X_temp, X_test, y_temp, y_test = train_test_split(X_subset, y_subset, test_size=test_size, random_state=42)
            # Chia t·∫≠p train v√† validation t·ª´ ph·∫ßn c√≤n l·∫°i
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, train_size=train_size_relative, random_state=42)

            st.success(f"ƒê√£ chia d·ªØ li·ªáu: Train {len(X_train)}, Validation {len(X_valid)}, Test {len(X_test)}")

            # L∆∞u d·ªØ li·ªáu ban ƒë·∫ßu v√†o session_state
            st.session_state['mnist_data'] = {
                'X_train': X_train,
                'y_train': y_train,
                'X_valid': X_valid,
                'y_valid': y_valid,
                'X_test': X_test,
                'y_test': y_test
            }

            # Logging vi·ªác chia d·ªØ li·ªáu v√†o MLflow t·∫°i DAGSHUB_MLFLOW_URI
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with mlflow.start_run(run_name=run_name) as run:
                mlflow.log_param("timestamp", timestamp)
                mlflow.log_param("run_id", run.info.run_id)
                mlflow.log_param("max_samples", max_samples)
                mlflow.log_param("test_size", test_size)
                mlflow.log_param("train_size", train_size)
                mlflow.log_param("valid_size", valid_size)
                mlflow.log_metric("train_samples", len(X_train))
                mlflow.log_metric("valid_samples", len(X_valid))
                mlflow.log_metric("test_samples", len(X_test))

                run_id = run.info.run_id
                mlflow_uri = st.session_state['mlflow_url']
                st.success(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chia v√† log v√†o DagsHub MLflow th√†nh c√¥ng! ‚úÖ (T√™n Run: {run_name}, Run ID: {run_id}, Th·ªùi gian: {timestamp})")
                st.markdown(f"Xem chi ti·∫øt t·∫°i: [DagsHub MLflow Tracking]({mlflow_uri})")

if __name__ == "__main__":
    preprocess()
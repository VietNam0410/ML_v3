import streamlit as st
import numpy as np
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import mlflow
import mlflow.sklearn
import os
import dagshub
import datetime

# H√†m kh·ªüi t·∫°o MLflow
def mlflow_input():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/VietNam0410/vn0410.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)
    st.session_state['mlflow_url'] = DAGSHUB_MLFLOW_URI
    os.environ["MLFLOW_TRACKING_USERNAME"] = "VietNam0410"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "22fd02345f8ff45482a20960058627630acaf190"  # Thay b·∫±ng token c√° nh√¢n c·ªßa b·∫°n
    DAGSHUB_REPO = "vn0410"
    return DAGSHUB_REPO

def plot_and_log_reduction(X_reduced, y, method, params, run):
    """V·∫Ω bi·ªÉu ƒë·ªì scatter v√† log v√†o MLflow."""
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=X_reduced[:, 0], y=X_reduced[:, 1], hue=y, palette="tab10", ax=ax, s=10)
    ax.set_title(f"{method} Visualization of MNIST (Train Set)")
    ax.set_xlabel(f"{method} Component 1")
    ax.set_ylabel(f"{method} Component 2")
    st.pyplot(fig)

    # L∆∞u plot v√†o file t·∫°m ƒë·ªÉ log v√†o MLflow
    plot_file = f"{method.lower()}_plot.png"
    fig.savefig(plot_file)
    if run:
        mlflow.log_artifact(plot_file, artifact_path="visualizations")
    os.remove(plot_file)  # X√≥a file t·∫°m sau khi log

    st.info(f"Bi·ªÉu ƒë·ªì {method} ƒë√£ ƒë∆∞·ª£c log v√†o DagsHub MLflow.")

def train():
    st.header("Hu·∫•n luy·ªán PCA v√† t-SNE tr√™n MNIST üßÆ")

    # ƒê√≥ng b·∫•t k·ª≥ run n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ tr√°nh xung ƒë·ªôt khi b·∫Øt ƒë·∫ßu
    if mlflow.active_run():
        mlflow.end_run()
        st.info("ƒê√£ ƒë√≥ng run MLflow ƒëang ho·∫°t ƒë·ªông tr∆∞·ªõc ƒë√≥.")

    # G·ªçi h√†m mlflow_input ƒë·ªÉ thi·∫øt l·∫≠p MLflow t·∫°i DAGSHUB_MLFLOW_URI
    DAGSHUB_REPO = mlflow_input()

    # Cho ng∆∞·ªùi d√πng ƒë·∫∑t t√™n Experiment
    experiment_name = st.text_input("Nh·∫≠p T√™n Experiment cho Gi·∫£m Chi·ªÅu", value="MNIST_DimReduction")
    with st.spinner("ƒêang thi·∫øt l·∫≠p Experiment tr√™n DagsHub MLflow..."):
        try:
            client = mlflow.tracking.MlflowClient()
            experiment = client.get_experiment_by_name(experiment_name)
            if experiment and experiment.lifecycle_stage == "deleted":
                st.warning(f"Experiment '{experiment_name}' ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥. Vui l√≤ng ch·ªçn t√™n kh√°c ho·∫∑c kh√¥i ph·ª•c experiment qua DagsHub UI.")
                new_experiment_name = st.text_input("Nh·∫≠p t√™n Experiment m·ªõi", value=f"{experiment_name}_Restored_{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                if new_experiment_name:
                    mlflow.set_experiment(new_experiment_name)
                    experiment_name = new_experiment_name
                else:
                    st.error("Vui l√≤ng nh·∫≠p t√™n experiment m·ªõi ƒë·ªÉ ti·∫øp t·ª•c.")
                    return
            else:
                mlflow.set_experiment(experiment_name)
        except Exception as e:
            st.error(f"L·ªói khi thi·∫øt l·∫≠p experiment: {str(e)}")
            return

    # Ki·ªÉm tra d·ªØ li·ªáu t·ª´ preprocess.py (ch·ªâ chia d·ªØ li·ªáu, kh√¥ng gi·∫£m chi·ªÅu)
    if 'mnist_data' not in st.session_state or st.session_state['mnist_data'] is None:
        st.error("D·ªØ li·ªáu MNIST ƒë√£ x·ª≠ l√Ω kh√¥ng t√¨m th·∫•y. Vui l√≤ng ho√†n t·∫•t ti·ªÅn x·ª≠ l√Ω trong 'preprocess.py' tr∆∞·ªõc.")
        return

    mnist_data = st.session_state['mnist_data']
    X_train = mnist_data['X_train']
    y_train = mnist_data['y_train']
    X_valid = mnist_data['X_valid']
    y_valid = mnist_data['y_valid']
    X_test = mnist_data['X_test']
    y_test = mnist_data['y_test']

    st.write(f"Train samples: {len(X_train)}, Validation samples: {len(X_valid)}, Test samples: {len(X_test)}")

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu train..."):
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_valid_scaled = scaler.transform(X_valid)
        X_test_scaled = scaler.transform(X_test)

    # Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu
    method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu ƒë·ªÉ hu·∫•n luy·ªán", ["PCA", "t-SNE"])

    # Cho ph√©p ng∆∞·ªùi d√πng ƒë·∫∑t t√™n run ID
    run_name = st.text_input("Nh·∫≠p t√™n Run ID cho gi·∫£m chi·ªÅu (ƒë·ªÉ tr·ªëng ƒë·ªÉ t·ª± ƒë·ªông t·∫°o)", value="", max_chars=20, key="run_name_input")
    if run_name.strip() == "":
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        run_name = f"MNIST_{method}_{timestamp.replace(' ', '_').replace(':', '-')}"  # ƒê·ªãnh d·∫°ng t√™n run h·ª£p l·ªá cho MLflow

    if method == "PCA":
        n_components = st.slider("S·ªë th√†nh ph·∫ßn PCA", 2, min(50, X_train_scaled.shape[1]), 2, key="pca_n_components")
        if st.button("Hu·∫•n luy·ªán PCA"):
            # ƒê√≥ng b·∫•t k·ª≥ run n√†o ƒëang ho·∫°t ƒë·ªông tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            if mlflow.active_run():
                mlflow.end_run()

            with st.spinner("ƒêang hu·∫•n luy·ªán PCA..."):
                pca = PCA(n_components=n_components, random_state=42)
                X_train_pca = pca.fit_transform(X_train_scaled)
                explained_variance_ratio = pca.explained_variance_ratio_.sum()

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.success(f"PCA ho√†n t·∫•t! T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance_ratio:.4f}")
                plot_and_log_reduction(X_train_pca, y_train, "PCA", {"n_components": n_components}, None)

                # L∆∞u m√¥ h√¨nh v√† d·ªØ li·ªáu gi·∫£m chi·ªÅu v√†o session_state
                st.session_state['pca_model'] = pca
                st.session_state['X_train_pca'] = X_train_pca
                st.session_state['X_valid_pca'] = pca.transform(X_valid_scaled)
                st.session_state['X_test_pca'] = pca.transform(X_test_scaled)

                # Logging v√†o MLflow t·∫°i DAGSHUB_MLFLOW_URI
                with mlflow.start_run(run_name=run_name) as run:
                    mlflow.log_param("timestamp", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    mlflow.log_param("run_id", run.info.run_id)
                    mlflow.log_param("method", "PCA")
                    mlflow.log_param("n_components", n_components)
                    mlflow.log_param("n_samples", X_train_scaled.shape[0])
                    mlflow.log_metric("explained_variance_ratio", explained_variance_ratio)
                    mlflow.sklearn.log_model(pca, "pca_model", input_example=X_train_scaled[:1])
                    plot_and_log_reduction(X_train_pca, y_train, "PCA", {"n_components": n_components}, run)

                    run_id = run.info.run_id
                    mlflow_uri = st.session_state['mlflow_url']
                    st.success(f"PCA ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† log v√†o DagsHub MLflow th√†nh c√¥ng! ‚úÖ (T√™n Run: {run_name}, Run ID: {run_id}, Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
                    st.markdown(f"Xem chi ti·∫øt t·∫°i: [DagsHub MLflow Tracking]({mlflow_uri})")

    elif method == "t-SNE":
        perplexity = st.slider("Perplexity", 5, 50, 30, key="tsne_perplexity")
        n_iter = st.slider("S·ªë l·∫ßn l·∫∑p", 250, 1000, 500, key="tsne_n_iter")
        if st.button("Hu·∫•n luy·ªán t-SNE"):
            # ƒê√≥ng b·∫•t k·ª≥ run n√†o ƒëang ho·∫°t ƒë·ªông tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            if mlflow.active_run():
                mlflow.end_run()

            with st.spinner("ƒêang hu·∫•n luy·ªán t-SNE (c√≥ th·ªÉ l√¢u v·ªõi d·ªØ li·ªáu l·ªõn)..."):
                tsne = TSNE(n_components=2, perplexity=perplexity, n_iter=n_iter, random_state=42)
                X_train_tsne = tsne.fit_transform(X_train_scaled)

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.success("t-SNE ho√†n t·∫•t!")
                plot_and_log_reduction(X_train_tsne, y_train, "t-SNE", {"perplexity": perplexity, "n_iter": n_iter}, None)

                # L∆∞u m√¥ h√¨nh v√† d·ªØ li·ªáu gi·∫£m chi·ªÅu v√†o session_state
                st.session_state['tsne_model'] = tsne
                st.session_state['X_train_tsne'] = X_train_tsne
                # t-SNE kh√¥ng c√≥ transform, d√πng tr√™n valid/test c·∫ßn t√≠nh l·∫°i
                st.session_state['X_valid_tsne'] = tsne.fit_transform(X_valid_scaled)
                st.session_state['X_test_tsne'] = tsne.fit_transform(X_test_scaled)

                # Logging v√†o MLflow t·∫°i DAGSHUB_MLFLOW_URI
                with mlflow.start_run(run_name=run_name) as run:
                    mlflow.log_param("timestamp", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    mlflow.log_param("run_id", run.info.run_id)
                    mlflow.log_param("method", "t-SNE")
                    mlflow.log_param("perplexity", perplexity)
                    mlflow.log_param("n_iter", n_iter)
                    mlflow.log_param("n_samples", X_train_scaled.shape[0])
                    mlflow.sklearn.log_model(tsne, "tsne_model", input_example=X_train_scaled[:1])
                    plot_and_log_reduction(X_train_tsne, y_train, "t-SNE", {"perplexity": perplexity, "n_iter": n_iter}, run)

                    run_id = run.info.run_id
                    mlflow_uri = st.session_state['mlflow_url']
                    st.success(f"t-SNE ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† log v√†o DagsHub MLflow th√†nh c√¥ng! ‚úÖ (T√™n Run: {run_name}, Run ID: {run_id}, Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
                    st.markdown(f"Xem chi ti·∫øt t·∫°i: [DagsHub MLflow Tracking]({mlflow_uri})")

if __name__ == "__main__":
    train()
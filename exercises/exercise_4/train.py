import streamlit as st
import numpy as np
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import mlflow
import mlflow.sklearn
import os
import dagshub

# Ph·∫ßn kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi DagsHub ƒë∆∞·ª£c comment ƒë·ªÉ kh√¥ng truy c·∫≠p ngay l·∫≠p t·ª©c
# with st.spinner("ƒêang k·∫øt n·ªëi v·ªõi DagsHub..."):
#     dagshub.init(repo_owner='VietNam0410', repo_name='vn0410', mlflow=True)
#     mlflow.set_tracking_uri(f"https://dagshub.com/VietNam0410/vn0410.mlflow")
# st.success("ƒê√£ k·∫øt n·ªëi v·ªõi DagsHub th√†nh c√¥ng!")

def plot_and_log_reduction(X_reduced, y, method, params):
    """V·∫Ω bi·ªÉu ƒë·ªì scatter v√† l∆∞u c·ª•c b·ªô."""
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=X_reduced[:, 0], y=X_reduced[:, 1], hue=y, palette="tab10", ax=ax, s=10)
    ax.set_title(f"{method} Visualization of MNIST")
    ax.set_xlabel(f"{method} Component 1")
    ax.set_ylabel(f"{method} Component 2")
    st.pyplot(fig)

    # L∆∞u plot v√†o file c·ª•c b·ªô m√† kh√¥ng log v·ªõi MLflow
    plot_file = f"{method.lower()}_plot.png"
    fig.savefig(plot_file)
    st.info(f"Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u c·ª•c b·ªô t·∫°i: {plot_file}")

def train():
    st.header("Hu·∫•n luy·ªán PCA v√† t-SNE tr√™n MNIST üßÆ")

    # Ki·ªÉm tra d·ªØ li·ªáu t·ª´ preprocess
    if 'mnist_data' not in st.session_state:
        st.error("Vui l√≤ng ch·∫°y ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu trong 'preprocess.py' tr∆∞·ªõc.")
        return

    mnist_data = st.session_state['mnist_data']
    X_train = mnist_data['X_train']
    y_train = mnist_data['y_train']
    X_valid = mnist_data['X_valid']
    y_valid = mnist_data['y_valid']
    X_test = mnist_data['X_test']
    y_test = mnist_data['y_test']

    st.write(f"Train samples: {len(X_train)}, Validation samples: {len(X_valid)}, Test samples: {len(X_test)}")

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu train..."):
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_valid_scaled = scaler.transform(X_valid)
        X_test_scaled = scaler.transform(X_test)

    # Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu
    method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu ƒë·ªÉ hu·∫•n luy·ªán", ["PCA", "t-SNE"])

    if method == "PCA":
        n_components = st.slider("S·ªë th√†nh ph·∫ßn PCA", 2, 50, 2)
        if st.button("Hu·∫•n luy·ªán PCA"):
            with st.spinner("ƒêang hu·∫•n luy·ªán PCA..."):
                pca = PCA(n_components=n_components)
                X_train_pca = pca.fit_transform(X_train_scaled)
                explained_variance_ratio = pca.explained_variance_ratio_.sum()

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† l∆∞u c·ª•c b·ªô
                st.success(f"PCA ho√†n t·∫•t! T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance_ratio:.4f}")
                plot_and_log_reduction(X_train_pca, y_train, "PCA", {"n_components": n_components})

                # L∆∞u m√¥ h√¨nh v√†o session_state
                st.session_state['pca_model'] = pca
                st.session_state['X_train_pca'] = X_train_pca
                st.session_state['X_valid_pca'] = pca.transform(X_valid_scaled)
                st.session_state['X_test_pca'] = pca.transform(X_test_scaled)

                # Comment ph·∫ßn logging v·ªõi MLflow
                # with mlflow.start_run(run_name=f"PCA_{n_components}_Components"):
                #     mlflow.log_param("method", "PCA")
                #     mlflow.log_param("n_components", n_components)
                #     mlflow.log_param("n_samples", X_train_scaled.shape[0])
                #     mlflow.log_metric("explained_variance_ratio", explained_variance_ratio)
                #     mlflow.sklearn.log_model(pca, "pca_model")
                #     plot_and_log_reduction(X_train_pca, y_train, "PCA", {"n_components": n_components}, "PCA")

    elif method == "t-SNE":
        perplexity = st.slider("Perplexity", 5, 50, 30)
        n_iter = st.slider("S·ªë l·∫ßn l·∫∑p", 250, 1000, 500)
        if st.button("Hu·∫•n luy·ªán t-SNE"):
            with st.spinner("ƒêang hu·∫•n luy·ªán t-SNE (c√≥ th·ªÉ l√¢u v·ªõi d·ªØ li·ªáu l·ªõn)..."):
                tsne = TSNE(n_components=2, perplexity=perplexity, n_iter=n_iter, random_state=42)
                X_train_tsne = tsne.fit_transform(X_train_scaled)

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† l∆∞u c·ª•c b·ªô
                st.success("t-SNE ho√†n t·∫•t!")
                plot_and_log_reduction(X_train_tsne, y_train, "t-SNE", {"perplexity": perplexity, "n_iter": n_iter})

                # L∆∞u m√¥ h√¨nh v√†o session_state
                st.session_state['tsne_model'] = tsne
                st.session_state['X_train_tsne'] = X_train_tsne
                # t-SNE kh√¥ng c√≥ transform, d√πng tr√™n valid/test c·∫ßn t√≠nh l·∫°i
                st.session_state['X_valid_tsne'] = tsne.fit_transform(X_valid_scaled)
                st.session_state['X_test_tsne'] = tsne.fit_transform(X_test_scaled)

                # Comment ph·∫ßn logging v·ªõi MLflow
                # with mlflow.start_run(run_name=f"tSNE_Perplexity_{perplexity}"):
                #     mlflow.log_param("method", "t-SNE")
                #     mlflow.log_param("perplexity", perplexity)
                #     mlflow.log_param("n_iter", n_iter)
                #     mlflow.log_param("n_samples", X_train_scaled.shape[0])
                #     mlflow.sklearn.log_model(tsne, "tsne_model")
                #     plot_and_log_reduction(X_train_tsne, y_train, "t-SNE", {"perplexity": perplexity, "n_iter": n_iter}, "t-SNE")

if __name__ == "__main__":
    train()